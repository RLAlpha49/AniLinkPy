{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AniLinkPy","text":"<p>AniLink is a Python library for interacting with the AniList API. It provides methods for querying and mutating data, making it easier to integrate AniList's features into your own applications.</p> <ul> <li> <p> Install</p> <p>Install AniLink with <code>poetry</code>, <code>hatch</code>, <code>pip</code> or <code>pipx</code> and start using it in minutes</p> <p> Installation</p> </li> </ul> <ul> <li> <p> AniList</p> <p>Use AniLink to query and mutate data from the AniList API</p> <p> AniList API</p> </li> <li> <p> MyAnimeList</p> <p>Coming soon: Use AniLink to query and mutate data from the MyAnimeList API</p> <p> MyAnimeList API</p> </li> <li> <p> Kitsu</p> <p>Coming soon: Use AniLink to query and mutate data from the Kitsu API</p> <p> Kitsu API</p> </li> </ul>"},{"location":"#error-handling","title":"Error Handling","text":"<p>AniLink will throw an error if the AniList API returns an error. You can catch these errors using a try-except block.</p> <p>Error Handling</p> <pre><code>try:\n  user = aniLink.anilist.query.user({'id': 542244})\n  print(user)\nexcept Exception as error:\n  print(error)\n</code></pre> <p>This includes status codes and error messages returned by the APIs. Here is an example rate limit handler to catch the errors thrown by AniLink:</p> <pre><code>def handle_rate_limit(api_call, retry_after=60):\n    while True:\n        try:\n            response = api_call()\n            print(response)\n            return response\n        except Exception as error:\n            if '429' in str(error):\n                print('Rate limit exceeded, waiting for 1 minute before retrying...')\n                time.sleep(retry_after)\n                print('Retrying...')\n            else:\n                raise error\n</code></pre> AniList Error Codes <p>The possible error codes returned by the AniList API are:</p> Status Code Description Example 400 Bad Request Missing variables, invalid variables, or invalid query 401 Unauthorized Invalid authentication token 404 Not Found User not found 429 Too Many Requests Rate limit exceeded 500 Internal Server Error AniList server"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"AniListAPI/","title":"AniList API","text":""},{"location":"AniListAPI/#structure","title":"Structure","text":"<p>AniLink for AniList is divided into two main sections: <code>anilist.query</code> and <code>anilist.mutation</code>. The <code>anilist.query</code> section contains methods for querying data from the AniList API, while the <code>anilist.mutation</code> section contains methods for mutating data.</p>"},{"location":"AniListAPI/#custom-queries-and-mutations","title":"Custom Queries and Mutations","text":"<p>If needed there is a custom section <code>anilist.custom</code> that allows the user to pass a custom query or mutation to the AniList API.</p> <p>The method accepts two parameters: the query or mutation string and an optional variables object.</p> <p>Custom Query</p> <pre><code>viewer = aniLink.anilist.custom('query {Viewer {id}}')\n\nmutation = 'mutation ($about: String) {UpdateUser (about: $about) {id}}'\nvariables = { 'about': \"New about text\" }\nresponse = aniLink.anilist.custom(mutation, variables)\n</code></pre>"},{"location":"AniListAPI/#query-methods","title":"Query Methods","text":"<p>The <code>anilist.query</code> section is further divided into main query methods and page query methods. The main query methods return a single piece of data, while the page query methods return pages of data.</p> <p>List of main query methods in <code>anilist.query</code>:</p> Method Description Example user Get a user <code>aniLink.anilist.query.user({'id': 542244})</code> media Get a media <code>aniLink.anilist.query.media({'id': 1})</code> mediaTrend Get media trends <code>aniLink.anilist.query.mediaTrend({'mediaId': 1})</code> airingSchedule Get airing schedule <code>aniLink.anilist.query.airingSchedule()</code> character Get a character <code>aniLink.anilist.query.character({'id': 1})</code> staff Get a staff <code>aniLink.anilist.query.staff({'id': 1})</code> mediaList Get a media list <code>aniLink.anilist.query.mediaList({'id': 1})</code> mediaListCollection Get media list collection <code>aniLink.anilist.query.mediaListCollection()</code> genreCollection Get genre collection <code>aniLink.anilist.query.genreCollection()</code> mediaTagCollection Get media tag collection <code>aniLink.anilist.query.mediaTagCollection()</code> viewer Get the current viewer <code>aniLink.anilist.query.viewer()</code> notification Get notifications <code>aniLink.anilist.query.notification()</code> studio Get a studio <code>aniLink.anilist.query.studio({'id': 1})</code> review Get a review <code>aniLink.anilist.query.review({'id': 1})</code> activity Get an activity <code>aniLink.anilist.query.activity({'id': 1})</code> activityReply Get an activity reply <code>aniLink.anilist.query.activityReply({'id': 1})</code> following Get following users <code>aniLink.anilist.query.following()</code> follower Get follower users <code>aniLink.anilist.query.follower()</code> thread Get a thread <code>aniLink.anilist.query.thread({'id': 1})</code> threadComment Get a thread comment <code>aniLink.anilist.query.threadComment({'id': 1})</code> recommendation Get a recommendation <code>aniLink.anilist.query.recommendation({'id': 1})</code> markdown Get markdown <code>aniLink.anilist.query.markdown({'markdown': 'Hello'})</code> aniChartUser Get AniChart user <code>aniLink.anilist.query.aniChartUser({'id': 1})</code> siteStatistics Get site statistics <code>aniLink.anilist.query.siteStatistics()</code> externalLinkSourceCollection Get external link sources <code>aniLink.anilist.query.externalLinkSourceCollection()</code> <p>List of page query methods in <code>anilist.query.page</code>:</p> Method Description Example users Get users <code>aniLink.anilist.query.page.users({'page': 1})</code> medias Get medias <code>aniLink.anilist.query.page.medias({'page': 1})</code> characters Get characters <code>aniLink.anilist.query.page.characters({'page': 1})</code> staffs Get staffs <code>aniLink.anilist.query.page.staffs({'page': 1})</code> studios Get studios <code>aniLink.anilist.query.page.studios({'page': 1})</code> mediaLists Get media lists <code>aniLink.anilist.query.page.mediaLists({'page': 1})</code> airingSchedules Get airing schedules <code>aniLink.anilist.query.page.airingSchedules({'page': 1})</code> mediaTrends Get media trends <code>aniLink.anilist.query.page.mediaTrends({'page': 1})</code> notifications Get notifications <code>aniLink.anilist.query.page.notifications({'page': 1})</code> followers Get followers <code>aniLink.anilist.query.page.followers({'page': 1})</code> following Get following users <code>aniLink.anilist.query.page.following({'page': 1})</code> activities Get activities <code>aniLink.anilist.query.page.activities({'page': 1})</code> activityReplies Get activity replies <code>aniLink.anilist.query.page.activityReplies({'page': 1})</code> threads Get threads <code>aniLink.anilist.query.page.threads({'page': 1})</code> threadComments Get thread comments <code>aniLink.anilist.query.page.threadComments({'page': 1})</code> reviews Get reviews <code>aniLink.anilist.query.page.reviews({'page': 1})</code> recommendations Get recommendations <code>aniLink.anilist.query.page.recommendations({'page': 1})</code> likes Get likes <code>aniLink.anilist.query.page.likes({'page': 1})</code>"},{"location":"AniListAPI/#mutation-methods","title":"Mutation Methods","text":"<p>List of methods in <code>anilist.mutation</code>:</p> Method Description Example updateUser Update a user <code>aniLink.anilist.mutation.updateUser({'about': 'New about text'})</code> saveMediaListEntry Save a media list entry <code>aniLink.anilist.mutation.saveMediaListEntry({'mediaId': 1, 'status': 'COMPLETED'})</code> updateMediaListEntries Update media list entries <code>aniLink.anilist.mutation.updateMediaListEntries({'mediaId': 1, 'status': 'COMPLETED'})</code> deleteMediaListEntries Delete media list entries <code>aniLink.anilist.mutation.deleteMediaListEntries({'ids': [1, 2, 3]})</code> deleteCustomLists Delete custom lists <code>aniLink.anilist.mutation.deleteCustomLists({'ids': [1, 2, 3]})</code> saveTextActivity Save a text activity <code>aniLink.anilist.mutation.saveTextActivity({'text': 'Hello'})</code> saveMessageActivity Save a message activity <code>aniLink.anilist.mutation.saveMessageActivity({'message': 'Hello'})</code> deleteActivity Delete an activity <code>aniLink.anilist.mutation.deleteActivity({'id': 1})</code> toggleActivityPin Toggle activity pin <code>aniLink.anilist.mutation.toggleActivityPin({'id': 1})</code> toggleActivitySubscription Toggle activity subscription <code>aniLink.anilist.mutation.toggleActivitySubscription({'id': 1})</code> saveActivityReply Save an activity reply <code>aniLink.anilist.mutation.saveActivityReply({'activityId': 1, 'text': 'Hello'})</code> deleteActivityReply Delete an activity reply <code>aniLink.anilist.mutation.deleteActivityReply({'id': 1})</code> toggleLike Toggle like <code>aniLink.anilist.mutation.toggleLike({'id': 1})</code> toggleLikeV2 Toggle like v2 <code>aniLink.anilist.mutation.toggleLikeV2({'id': 1})</code> toggleFollow Toggle follow <code>aniLink.anilist.mutation.toggleFollow({'id': 1})</code> toggleFavourite Toggle favourite <code>aniLink.anilist.mutation.toggleFavourite({'id': 1})</code> updateFavouriteOrder Update favourite order <code>aniLink.anilist.mutation.updateFavouriteOrder({'ids': [1, 2, 3]})</code> saveReview Save a review <code>aniLink.anilist.mutation.saveReview({'mediaId': 1, 'body': 'Review text'})</code> deleteReview Delete a review <code>aniLink.anilist.mutation.deleteReview({'id': 1})</code> saveRecommendation Save a recommendation <code>aniLink.anilist.mutation.saveRecommendation({'mediaId': 1, 'body': 'Recommendation text'})</code> saveThread Save a thread <code>aniLink.anilist.mutation.saveThread({'title': 'Thread title', 'body': 'Thread body'})</code> deleteThread Delete a thread <code>aniLink.anilist.mutation.deleteThread({'id': 1})</code> toggleThreadSubscription Toggle thread subscription <code>aniLink.anilist.mutation.toggleThreadSubscription({'id': 1})</code> saveThreadComment Save a thread comment <code>aniLink.anilist.mutation.saveThreadComment({'threadId': 1, 'body': 'Comment body'})</code> deleteThreadComment Delete a thread comment <code>aniLink.anilist.mutation.deleteThreadComment({'id': 1})</code> updateAniChartSettings Update AniChart settings <code>aniLink.anilist.mutation.updateAniChartSettings({'settings': 'Settings'})</code> updateAniChartHighlights Update AniChart highlights <code>aniLink.anilist.mutation.updateAniChartHighlights({'highlights': 'Highlights'})</code>"},{"location":"KitsuAPI/","title":"Kitsu API","text":"<p>Work in progress.</p>"},{"location":"MyAnimeListAPI/","title":"MyAnimeList API","text":"<p>Work in progress.</p>"},{"location":"installation/","title":"Installation","text":"<p>Installing AniLinkPy is straightforward. The recommended approach is to use a project manager like Poetry or Hatch, as these tools provide a clean, isolated environment for your project. Alternatively, you can use pipx, which automatically sandboxes your pip installations into separate environments. If you prefer to use pip, you can install AniLinkPy directly as well.</p> PoetryHatchpipxPip <p>In <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry.dependencies]\nAniLinkPy = \"*\" # (1)!\n</code></pre> <ol> <li> <p>The <code>*</code> will install the latest version of AniLinkPy. You can also specify a version number to install a specific version. </p> <p>Specifying a Version</p> <pre><code>[tool.poetry.dependencies]\nAniLinkPy = \"1.0.0\"\n</code></pre> </li> </ol> <p>In <code>pyproject.toml</code>:</p> <pre><code>dependencies = [\n    \"AniLinkPy\" # (1)!\n]\n</code></pre> <ol> <li> <p>To install a specific version of AniLinkPy, you can specify the version number in the dependencies list:</p> <p>Specifying a Version</p> <pre><code>dependencies = [\n    \"AniLinkPy==1.0.0\"\n]\n</code></pre> </li> </ol> <p>Run the following command in your terminal:    </p> <pre><code>pipx install AniLinkPy # (1)!\n</code></pre> <ol> <li> <p>To install a specific version of AniLinkPy, you can specify the version number with the package name:</p> <p>Specifying a Version</p> <pre><code>pipx install AniLinkPy==1.0.0\n</code></pre> </li> </ol> <p>Run the following command in your terminal:    </p> <pre><code>pip install AniLinkPy # (1)!\n</code></pre> <ol> <li> <p>To install a specific version of AniLinkPy:</p> <p>Specifying a Version</p> <pre><code>pip install AniLinkPy==1.0.0\n</code></pre> </li> </ol>"},{"location":"installation/#initialization","title":"Initialization","text":"<p>To start using AniLink, you need to import it and initialize it with an optional authentication token. You can get an authentication token from the respective platform (e.g. AniList).</p> <p>Importing &amp; Initializing AniLink</p> <pre><code>from AniLinkPy import AniLink\n\nauth_token = 'your-auth-token' # (1)!\naniLink = AniLink(auth_token)\n</code></pre> <ol> <li>Please replace <code>'your-auth-token'</code> with your actual authentication token.</li> </ol> <p>You can also initialize AniLink without an authentication token</p> <pre><code>aniLink = AniLink()\n</code></pre>"},{"location":"AniLink/","title":"AniLink API Documentation","text":"<p>This is the API documentation for the <code>AniLink</code> class in the <code>AniLinkPy</code> module.</p>"},{"location":"AniLink/#anilink-class","title":"AniLink Class","text":""},{"location":"AniLink/#AniLinkPy.AniLink.AniLink","title":"AniLink","text":"<pre><code>AniLink(auth_token: Optional[str] = None)\n</code></pre> <p>This class represents the AniLink API.</p> ATTRIBUTE DESCRIPTION <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> <code>anilist</code> <p>An instance of the AniList class.</p> <p> TYPE: <code>AniList</code> </p> PARAMETER DESCRIPTION <code>auth_token</code> <p>The authentication token. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> Source code in <code>AniLinkPy/AniLink.py</code> <pre><code>def __init__(self, auth_token: Optional[str] = None) -&gt; None:\n    \"\"\"\n    The constructor for AniLink class.\n\n    Args:\n        auth_token (str, optional): The authentication token. Defaults to None.\n    \"\"\"\n    self.auth_token = auth_token\n    self.anilist = AniList(self.auth_token)\n</code></pre>"},{"location":"AniLink/#AniLinkPy.AniLink.AniLink.anilist","title":"anilist  <code>instance-attribute</code>","text":"<pre><code>anilist = AniList(auth_token)\n</code></pre>"},{"location":"AniLink/#AniLinkPy.AniLink.AniLink.auth_token","title":"auth_token  <code>instance-attribute</code>","text":"<pre><code>auth_token = auth_token\n</code></pre>"},{"location":"AniLink/base/","title":"APIWrapper Documentation","text":"<p>This is the API documentation for the <code>APIWrapper</code> class and <code>send_request</code> function in the <code>AniLinkPy</code> module.</p>"},{"location":"AniLink/base/#apiwrapper-class","title":"APIWrapper Class","text":"<p>This class represents a wrapper for the API.</p> ATTRIBUTE DESCRIPTION <code>base_url</code> <p>The base URL for the API.</p> <p> TYPE: <code>str</code> </p> PARAMETER DESCRIPTION <code>base_url</code> <p>The base URL for the API.</p> <p> TYPE: <code>str</code> </p> Source code in <code>AniLinkPy/base/APIWrapper.py</code> <pre><code>def __init__(self, base_url: str) -&gt; None:\n    \"\"\"\n    The constructor for the APIWrapper class.\n\n    Args:\n        base_url (str): The base URL for the API.\n    \"\"\"\n    self.base_url = base_url\n</code></pre>"},{"location":"AniLink/base/#AniLinkPy.base.APIWrapper.APIWrapper.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = base_url\n</code></pre>"},{"location":"AniLink/base/#send_request-function","title":"send_request Function","text":"<p>This function sends a request to the specified URL.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URL to send the request to.</p> <p> TYPE: <code>str</code> </p> <code>method</code> <p>The HTTP method to use for the request. Supports 'GET' and 'POST'.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to include in the request. Defaults to None.</p> <p> TYPE: <code>dict</code> </p> <code>token</code> <p>The authentication token. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The number of seconds the client will wait for the server to send a response.</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> RAISES DESCRIPTION <code>UnsupportedMethodError</code> <p>If an unsupported method is provided.</p> <code>RequestError</code> <p>If there is an error in the request response.</p> RETURNS DESCRIPTION <code>dict</code> <p>The JSON response from the request.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/base/RequestHandler.py</code> <pre><code>def send_request(\n    url: str, method: str, data: dict, token: Optional[str] = None, timeout: int = 15\n) -&gt; dict:\n    \"\"\"\n    This function sends a request to the specified URL.\n\n    Args:\n        url (str): The URL to send the request to.\n        method (str): The HTTP method to use for the request. Supports 'GET' and 'POST'.\n        data (dict, optional): The data to include in the request. Defaults to None.\n        token (str, optional): The authentication token. Defaults to None.\n        timeout (int, optional): The number of seconds the client will wait for the server to send a response.\n\n    Raises:\n        UnsupportedMethodError: If an unsupported method is provided.\n        RequestError: If there is an error in the request response.\n\n    Returns:\n        dict: The JSON response from the request.\n    \"\"\"\n    headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    if token:\n        headers[\"Authorization\"] = f\"Bearer {token}\"\n\n    if method.upper() not in [\"GET\", \"POST\"]:\n        raise UnsupportedMethodError(method)\n\n    response = None\n\n    if method.upper() == \"GET\":\n        response = requests.get(url, headers=headers, params=data, timeout=timeout)\n    elif method.upper() == \"POST\":\n        response = requests.post(url, headers=headers, json=data, timeout=timeout)\n\n    if response is None:\n        raise RequestError(\"No response received\")\n\n    if response is not None:\n        response_json = response.json()\n        if \"errors\" in response_json and response_json[\"errors\"]:\n            raise RequestError(response_json[\"errors\"])\n\n    return response.json()\n</code></pre>"},{"location":"AniLink/exceptions/","title":"Exception classes Documentation","text":""},{"location":"AniLink/exceptions/#exceptions","title":"Exceptions","text":""},{"location":"AniLink/exceptions/#AniLinkPy.exceptions.RequestError","title":"RequestError","text":"<pre><code>RequestError(errors: Union[str, List[str]])\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Raised when there is an error in the request response.</p> Source code in <code>AniLinkPy/exceptions.py</code> <pre><code>def __init__(self, errors: Union[str, List[str]]) -&gt; None:\n    self.errors = errors\n    super().__init__(f\"Request Error: {self.errors}\")\n</code></pre>"},{"location":"AniLink/exceptions/#AniLinkPy.exceptions.RequestError.errors","title":"errors  <code>instance-attribute</code>","text":"<pre><code>errors = errors\n</code></pre>"},{"location":"AniLink/exceptions/#AniLinkPy.exceptions.UnsupportedMethodError","title":"UnsupportedMethodError","text":"<pre><code>UnsupportedMethodError(method: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Raised when an unsupported method is provided to the send_request function.</p> Source code in <code>AniLinkPy/exceptions.py</code> <pre><code>def __init__(self, method: str) -&gt; None:\n    self.method = method\n    super().__init__(f\"Unsupported method: {self.method}\")\n</code></pre>"},{"location":"AniLink/exceptions/#AniLinkPy.exceptions.UnsupportedMethodError.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method = method\n</code></pre>"},{"location":"AniLink/AniList/","title":"AniList API Documentation","text":""},{"location":"AniLink/AniList/#AniLinkPy.apis.anilist.anilist.AniList","title":"AniList","text":"<pre><code>AniList(auth_token: Union[str, None])\n</code></pre> <p>This class represents the AniList API.</p> ATTRIBUTE DESCRIPTION <code>query</code> <p>An instance of the Query class.</p> <p> TYPE: <code>Query</code> </p> <code>mutation</code> <p>An instance of the Mutation class.</p> <p> TYPE: <code>Mutation</code> </p> <code>custom_query</code> <p>An instance of the CustomRequest class.</p> <p> TYPE: <code>CustomRequest</code> </p> PARAMETER DESCRIPTION <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> Source code in <code>AniLinkPy/apis/anilist/anilist.py</code> <pre><code>def __init__(self, auth_token: Union[str, None]) -&gt; None:\n    \"\"\"\n    The constructor for AniList class.\n\n    Args:\n        auth_token (str): The authentication token.\n    \"\"\"\n    self.query = Query(auth_token)\n    self.mutation = Mutation()\n    self.custom_query = CustomRequest(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/#AniLinkPy.apis.anilist.anilist.AniList.custom_query","title":"custom_query  <code>instance-attribute</code>","text":"<pre><code>custom_query = CustomRequest(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/#AniLinkPy.apis.anilist.anilist.AniList.mutation","title":"mutation  <code>instance-attribute</code>","text":"<pre><code>mutation = Mutation()\n</code></pre>"},{"location":"AniLink/AniList/#AniLinkPy.apis.anilist.anilist.AniList.query","title":"query  <code>instance-attribute</code>","text":"<pre><code>query = Query(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/#AniLinkPy.apis.anilist.anilist.AniList.custom","title":"custom","text":"<pre><code>custom(query: str, variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict\n</code></pre> <p>This method is used to send a custom Query or Mutation.</p> PARAMETER DESCRIPTION <code>query</code> <p>The Query string.</p> <p> TYPE: <code>str</code> </p> <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the custom Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/anilist.py</code> <pre><code>def custom(\n    self, query: str, variables: Union[Dict[str, Union[str, int, bool]]]\n) -&gt; dict:\n    \"\"\"\n    This method is used to send a custom Query or Mutation.\n\n    Args:\n        query (str): The Query string.\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the custom Query.\n    \"\"\"\n    return self.custom_query.custom(query, variables)\n</code></pre>"},{"location":"AniLink/AniList/custom/","title":"Anilist Custom Request Documentation","text":""},{"location":"AniLink/AniList/custom/#AniLinkPy.apis.anilist.custom.CustomRequest","title":"CustomRequest","text":"<pre><code>CustomRequest(auth_token: Union[str, None])\n</code></pre> <p>This class represents a custom request in the AniLink API.</p> ATTRIBUTE DESCRIPTION <code>base_url</code> <p>The base URL for the AniLink API.</p> <p> TYPE: <code>str</code> </p> <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> PARAMETER DESCRIPTION <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> Source code in <code>AniLinkPy/apis/anilist/custom.py</code> <pre><code>def __init__(self, auth_token: Union[str, None]) -&gt; None:\n    \"\"\"\n    The constructor for the CustomRequest class.\n\n    Args:\n        auth_token (str): The authentication token.\n    \"\"\"\n    self.base_url = \"https://graphql.anilist.co\"\n    self.auth_token = auth_token\n</code></pre>"},{"location":"AniLink/AniList/custom/#AniLinkPy.apis.anilist.custom.CustomRequest.auth_token","title":"auth_token  <code>instance-attribute</code>","text":"<pre><code>auth_token = auth_token\n</code></pre>"},{"location":"AniLink/AniList/custom/#AniLinkPy.apis.anilist.custom.CustomRequest.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = 'https://graphql.anilist.co'\n</code></pre>"},{"location":"AniLink/AniList/custom/#AniLinkPy.apis.anilist.custom.CustomRequest.custom","title":"custom","text":"<pre><code>custom(query: str, variables: Optional[Union[Dict[str, Union[str, int, bool]]]] = None) -&gt; dict\n</code></pre> <p>This method is used to send a custom Query.</p> PARAMETER DESCRIPTION <code>query</code> <p>The Query string.</p> <p> TYPE: <code>str</code> </p> <code>variables</code> <p>The variables for the Query. Defaults to None.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the custom Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/custom.py</code> <pre><code>def custom(\n    self,\n    query: str,\n    variables: Optional[Union[Dict[str, Union[str, int, bool]]]] = None,\n) -&gt; dict:\n    \"\"\"\n    This method is used to send a custom Query.\n\n    Args:\n        query (str): The Query string.\n        variables (dict, optional): The variables for the Query. Defaults to None.\n\n    Returns:\n        dict: The response from the custom Query.\n    \"\"\"\n    if variables is None:\n        variables = {}\n\n    data = {\"query\": query, \"variables\": variables}\n    return send_request(self.base_url, \"POST\", data, self.auth_token)\n</code></pre>"},{"location":"AniLink/AniList/schemas/","title":"Basic Schema Documentation","text":"<p>This is the documentation for the basic schemas.</p>"},{"location":"AniLink/AniList/schemas/#activity-schema","title":"Activity Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.ACTIVITYNOTIFICATIONSCHEMA","title":"ACTIVITYNOTIFICATIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>ACTIVITYNOTIFICATIONSCHEMA = f'\n  id\n  userId\n  type\n  activityId\n  context\n  createdAt\n  {ACTIVITYSCHEMA}\n    user {\n      {BASICUSERSCHEMA}\n    }\n'\n</code></pre> <p>This is the ActivityNotificationSchema for the Anilist API. It defines the structure of the activity notification data.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the notification.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the notification.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the notification.</p> <p> TYPE: <code>str</code> </p> <code>activityId</code> <p>The id of the activity related to the notification.</p> <p> TYPE: <code>int</code> </p> <code>context</code> <p>The context of the notification.</p> <p> TYPE: <code>str</code> </p> <code>createdAt</code> <p>The timestamp when the notification was created.</p> <p> TYPE: <code>int</code> </p> <code>ActivitySchema</code> <p>The details of the activity related to the notification.</p> <p> TYPE: <code>str</code> </p> <code>BASICUSERSCHEMA</code> <p>The details of the user who created the notification.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.ACTIVITYREPLYSCHEMA","title":"ACTIVITYREPLYSCHEMA  <code>module-attribute</code>","text":"<pre><code>ACTIVITYREPLYSCHEMA = f'\n  id\n  userId\n  activityId\n  text (asHtml: $asHtml)\n  likeCount\n  isLiked\n  createdAt\n  user {\n    {BASICUSERSCHEMA}\n  }\n  likes {\n    {BASICUSERSCHEMA}\n  }\n'\n</code></pre> <p>This is the ActivityReplySchema for the Anilist API. It defines the structure of the activity reply data.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the activity.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the activity.</p> <p> TYPE: <code>int</code> </p> <code>activityId</code> <p>The id of the activity.</p> <p> TYPE: <code>int</code> </p> <code>text</code> <p>The text of the activity.</p> <p> TYPE: <code>str</code> </p> <code>likeCount</code> <p>The count of likes on the activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>createdAt</code> <p>The timestamp when the activity was created.</p> <p> TYPE: <code>int</code> </p> <code>user</code> <p>The user who created the activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>likes</code> <p>The list of users who liked the activity.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.ACTIVITYSCHEMA","title":"ACTIVITYSCHEMA  <code>module-attribute</code>","text":"<pre><code>ACTIVITYSCHEMA = '\\n  ... on TextActivity {\\n    id\\n    userId\\n    type\\n    replyCount\\n    text (asHtml: $asHtml)\\n    siteUrl\\n    isLocked\\n    isSubscribed\\n    likeCount\\n    isLiked\\n    isPinned\\n    createdAt\\n  }\\n  ... on ListActivity {\\n    id\\n    userId\\n    type\\n    replyCount\\n    status\\n    progress\\n    isLocked\\n    isSubscribed\\n    likeCount\\n    isLiked\\n    isPinned\\n    siteUrl\\n    createdAt\\n    media {\\n      id\\n      title {\\n        romaji\\n        english\\n      }\\n    }\\n  }\\n  ... on MessageActivity {\\n    id\\n    recipientId\\n    messengerId\\n    type\\n    replyCount\\n    message (asHtml: $asHtml)\\n    isLocked\\n    isSubscribed\\n    likeCount\\n    isLiked\\n    isPrivate\\n    siteUrl\\n    createdAt\\n  }\\n'\n</code></pre> <p>This is the ActivitySchema for the Anilist API. It defines the structure of the activity data</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the activity.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the activity.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the activity.</p> <p> TYPE: <code>str</code> </p> <code>replyCount</code> <p>The count of replies on the activity.</p> <p> TYPE: <code>int</code> </p> <code>text</code> <p>The text of the activity.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site URL of the activity.</p> <p> TYPE: <code>str</code> </p> <code>isLocked</code> <p>Whether the activity is locked.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>Whether the user is subscribed to the activity.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The count of likes on the activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>isPinned</code> <p>Whether the activity is pinned.</p> <p> TYPE: <code>bool</code> </p> <code>createdAt</code> <p>The timestamp when the activity was created.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.ACTIVITYSCHEMAV2","title":"ACTIVITYSCHEMAV2  <code>module-attribute</code>","text":"<pre><code>ACTIVITYSCHEMAV2 = f'\n  ... on TextActivity {\n    id\n    userId\n    type\n    replyCount\n    text (asHtml: $asHtml)\n    siteUrl\n    isLocked\n    isSubscribed\n    likeCount\n    isLiked\n    isPinned\n    createdAt\n    user {\n      {BASICUSERSCHEMA}\n    }\n    replies {\n      {ACTIVITYREPLYSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on ListActivity {\n    id\n    userId\n    type\n    replyCount\n    status\n    progress\n    isLocked\n    isSubscribed\n    likeCount\n    isLiked\n    isPinned\n    siteUrl\n    createdAt\n    media {\n      id\n      title {\n        romaji\n        english\n      }\n    }\n    user {\n      {BASICUSERSCHEMA}\n    }\n    replies {\n      {ACTIVITYREPLYSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on MessageActivity {\n    id\n    recipientId\n    messengerId\n    type\n    replyCount\n    message (asHtml: $asHtml)\n    isLocked\n    isSubscribed\n    likeCount\n    isLiked\n    isPrivate\n    siteUrl\n    createdAt\n    recipient {\n      {BASICUSERSCHEMA}\n    }\n    messenger {\n      {BASICUSERSCHEMA}\n    }\n    replies {\n      {ACTIVITYREPLYSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on ActivityReply {\n    id\n    userId\n    activityId\n    text (asHtml: $asHtml)\n    likeCount\n    isLiked\n    createdAt\n    user {\n      {BASICUSERSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on Thread {\n    id\n    title\n    body (asHtml: $asHtml)\n    ThreadUserId: userId\n    replyUserId\n    replyCommentId\n    ThreadReplyCount: replyCount\n    viewCount\n    isLocked\n    isSticky\n    isSubscribed\n    likeCount\n    isLiked\n    repliedAt\n    createdAt\n    updatedAt\n    user {\n      {BASICUSERSCHEMA}\n    }\n    replyUser {\n      {BASICUSERSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n    siteUrl\n    categories {\n      id\n      name\n    }\n    mediaCategories {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  ... on ThreadComment {\n    id\n    userId\n    threadId\n    comment (asHtml: $asHtml)\n    likeCount\n    isLiked\n    siteUrl\n    createdAt\n    updatedAt\n    thread {\n      id\n      title\n    }\n    user {\n      {BASICUSERSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n    childComments\n    isLocked\n  }\n'\n</code></pre> <p>This is the ActivitySchemaV2 for the Anilist API. It defines the structure of the activity data</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the activity.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the activity.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the activity.</p> <p> TYPE: <code>str</code> </p> <code>replyCount</code> <p>The count of replies on the activity.</p> <p> TYPE: <code>int</code> </p> <code>text</code> <p>The text of the activity.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site URL of the activity.</p> <p> TYPE: <code>str</code> </p> <code>isLocked</code> <p>Whether the activity is locked.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>Whether the user is subscribed to the activity.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The count of likes on the activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>isPinned</code> <p>Whether the activity is pinned.</p> <p> TYPE: <code>bool</code> </p> <code>createdAt</code> <p>The timestamp when the activity was created.</p> <p> TYPE: <code>int</code> </p> <code>user</code> <p>The user who created the activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>replies</code> <p>The list of replies to the activity.</p> <p> TYPE: <code>list</code> </p> <code>likes</code> <p>The list of users who liked the activity.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.ACTIVITYWITHREPLIESSCHEMA","title":"ACTIVITYWITHREPLIESSCHEMA  <code>module-attribute</code>","text":"<pre><code>ACTIVITYWITHREPLIESSCHEMA = f'\n  ... on TextActivity {\n    id\n    userId\n    type\n    replyCount\n    text (asHtml: $asHtml)\n    siteUrl\n    isLocked\n    isSubscribed\n    likeCount\n    isLiked\n    isPinned\n    createdAt\n    user {\n      {BASICUSERSCHEMA}\n    }\n    replies {\n      {ACTIVITYREPLYSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on ListActivity {\n    id\n    userId\n    type\n    replyCount\n    status\n    progress\n    isLocked\n    isSubscribed\n    likeCount\n    isLiked\n    isPinned\n    siteUrl\n    createdAt\n    media {\n      id\n      title {\n        romaji\n        english\n      }\n    }\n    user {\n      {BASICUSERSCHEMA}\n    }\n    replies {\n      {ACTIVITYREPLYSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on MessageActivity {\n    id\n    recipientId\n    messengerId\n    type\n    replyCount\n    message (asHtml: $asHtml)\n    isLocked\n    isSubscribed\n    likeCount\n    isLiked\n    isPrivate\n    siteUrl\n    createdAt\n    recipient {\n      {BASICUSERSCHEMA}\n    }\n    messenger {\n      {BASICUSERSCHEMA}\n    }\n    replies {\n      {ACTIVITYREPLYSCHEMA}\n    }\n    likes {\n      {BASICUSERSCHEMA}\n    }\n  }\n'\n</code></pre> <p>This is the ActivityWithRepliesSchema for the Anilist API. It defines the structure of the activity data</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the activity.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the activity.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the activity.</p> <p> TYPE: <code>str</code> </p> <code>replyCount</code> <p>The count of replies on the activity.</p> <p> TYPE: <code>int</code> </p> <code>text</code> <p>The text of the activity.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site URL of the activity.</p> <p> TYPE: <code>str</code> </p> <code>isLocked</code> <p>Whether the activity is locked.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>Whether the user is subscribed to the activity.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The count of likes on the activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>isPinned</code> <p>Whether the activity is pinned.</p> <p> TYPE: <code>bool</code> </p> <code>createdAt</code> <p>The timestamp when the activity was created.</p> <p> TYPE: <code>int</code> </p> <code>user</code> <p>The user who created the activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>replies</code> <p>The list of replies to the activity.</p> <p> TYPE: <code>list</code> </p> <code>likes</code> <p>The list of users who liked the activity.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.LISTACTIVITYSCHEMA","title":"LISTACTIVITYSCHEMA  <code>module-attribute</code>","text":"<pre><code>LISTACTIVITYSCHEMA = f'\n  id\n  userId\n  type\n  replyCount\n  status\n  progress\n  isLocked\n  isSubscribed\n  likeCount\n  isLiked\n  isPinned\n  siteUrl\n  createdAt\n  media {\n    id\n    title {\n      romaji\n      english\n    }\n  }\n  user {\n    {BASICUSERSCHEMA}\n  }\n  replies {\n    {ACTIVITYREPLYSCHEMA}\n  }\n  likes {\n    {BASICUSERSCHEMA}\n  }\n'\n</code></pre> <p>This is the ListActivitySchema for the Anilist API. It defines the structure of the list activity data.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the list activity.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the list activity.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the list activity.</p> <p> TYPE: <code>str</code> </p> <code>replyCount</code> <p>The count of replies on the list activity.</p> <p> TYPE: <code>int</code> </p> <code>status</code> <p>The status of the list activity.</p> <p> TYPE: <code>str</code> </p> <code>progress</code> <p>The progress of the list activity.</p> <p> TYPE: <code>int</code> </p> <code>isLocked</code> <p>Whether the list activity is locked.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>Whether the user is subscribed to the list activity.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The count of likes on the list activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the list activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>isPinned</code> <p>Whether the list activity is pinned.</p> <p> TYPE: <code>bool</code> </p> <code>siteUrl</code> <p>The site URL of the list activity.</p> <p> TYPE: <code>str</code> </p> <code>createdAt</code> <p>The timestamp when the list activity was created.</p> <p> TYPE: <code>int</code> </p> <code>media</code> <p>The media details of the list activity.</p> <p> TYPE: <code>dict</code> </p> <code>user</code> <p>The user who created the list activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>replies</code> <p>The list of replies to the list activity.</p> <p> TYPE: <code>list</code> </p> <code>likes</code> <p>The list of users who liked the list activity.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.MESSAGEACTIVITYSCHEMA","title":"MESSAGEACTIVITYSCHEMA  <code>module-attribute</code>","text":"<pre><code>MESSAGEACTIVITYSCHEMA = f'\n  id\n  recipientId\n  messengerId\n  type\n  replyCount\n  message (asHtml: $asHtml)\n  isLocked\n  isSubscribed\n  likeCount\n  isLiked\n  isPrivate\n  siteUrl\n  createdAt\n  recipient {\n    {BASICUSERSCHEMA}\n  }\n  messenger {\n    {BASICUSERSCHEMA}\n  }\n  replies {\n    {ACTIVITYREPLYSCHEMA}\n  }\n  likes {\n    {BASICUSERSCHEMA}\n  }\n'\n</code></pre> <p>This is the MessageActivitySchema for the Anilist API. It defines the structure of the message activity data.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the message activity.</p> <p> TYPE: <code>int</code> </p> <code>recipientId</code> <p>The id of the recipient of the message activity.</p> <p> TYPE: <code>int</code> </p> <code>messengerId</code> <p>The id of the messenger of the message activity.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the message activity.</p> <p> TYPE: <code>str</code> </p> <code>replyCount</code> <p>The count of replies on the message activity.</p> <p> TYPE: <code>int</code> </p> <code>message</code> <p>The message of the message activity.</p> <p> TYPE: <code>str</code> </p> <code>isLocked</code> <p>Whether the message activity is locked.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>Whether the user is subscribed to the message activity.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The count of likes on the message activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the message activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>isPrivate</code> <p>Whether the message activity is private.</p> <p> TYPE: <code>bool</code> </p> <code>siteUrl</code> <p>The site URL of the message activity.</p> <p> TYPE: <code>str</code> </p> <code>createdAt</code> <p>The timestamp when the message activity was created.</p> <p> TYPE: <code>int</code> </p> <code>recipient</code> <p>The recipient of the message activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>messenger</code> <p>The messenger of the message activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>replies</code> <p>The list of replies to the message activity.</p> <p> TYPE: <code>list</code> </p> <code>likes</code> <p>The list of users who liked the message activity.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.activity_schema.TEXTACTIVITYSCHEMA","title":"TEXTACTIVITYSCHEMA  <code>module-attribute</code>","text":"<pre><code>TEXTACTIVITYSCHEMA = f'\n  id\n  userId\n  type\n  replyCount\n  text (asHtml: $asHtml)\n  siteUrl\n  isLocked\n  isSubscribed\n  likeCount\n  isLiked\n  isPinned\n  createdAt\n  user {\n    {BASICUSERSCHEMA}\n  }\n  replies {\n    {ACTIVITYREPLYSCHEMA}\n  }\n  likes {\n    {BASICUSERSCHEMA}\n  }\n'\n</code></pre> <p>This is the TextActivitySchema for the Anilist API. It defines the structure of the text activity data.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the text activity.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who created the text activity.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the text activity.</p> <p> TYPE: <code>str</code> </p> <code>replyCount</code> <p>The count of replies on the text activity.</p> <p> TYPE: <code>int</code> </p> <code>text</code> <p>The text of the text activity.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site URL of the text activity.</p> <p> TYPE: <code>str</code> </p> <code>isLocked</code> <p>Whether the text activity is locked.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>Whether the user is subscribed to the text activity.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The count of likes on the text activity.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>Whether the text activity is liked by the user.</p> <p> TYPE: <code>bool</code> </p> <code>isPinned</code> <p>Whether the text activity is pinned.</p> <p> TYPE: <code>bool</code> </p> <code>createdAt</code> <p>The timestamp when the text activity was created.</p> <p> TYPE: <code>int</code> </p> <code>user</code> <p>The user who created the text activity.</p> <p> TYPE: <code>BasicUser</code> </p> <code>replies</code> <p>The list of replies to the text activity.</p> <p> TYPE: <code>list</code> </p> <code>likes</code> <p>The list of users who liked the text activity.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#basic-schemas","title":"Basic Schema's","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.basic_schema.BASICCOMMENTSCHEMA","title":"BASICCOMMENTSCHEMA  <code>module-attribute</code>","text":"<pre><code>BASICCOMMENTSCHEMA = '\\n  id\\n  userId\\n  threadId\\n'\n</code></pre> <p>This is the BasicCommentSchema for the AniList API. It defines the structure of the image data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the comment.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The id of the user who made the comment.</p> <p> TYPE: <code>int</code> </p> <code>threadId</code> <p>The id of the thread where the comment is.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.basic_schema.BASICTHREADSCHEMA","title":"BASICTHREADSCHEMA  <code>module-attribute</code>","text":"<pre><code>BASICTHREADSCHEMA = '\\n  id\\n  title\\n  body (asHtml: $asHtml)\\n  siteUrl\\n'\n</code></pre> <p>This is the BasicThreadSchema for the AniList API. It defines the structure of the image data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the thread.</p> <p> TYPE: <code>int</code> </p> <code>title</code> <p>The title of the thread.</p> <p> TYPE: <code>str</code> </p> <code>body</code> <p>The body of the thread.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site URL of the thread.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.basic_schema.BASICUSERSCHEMA","title":"BASICUSERSCHEMA  <code>module-attribute</code>","text":"<pre><code>BASICUSERSCHEMA = '\\n  id\\n  name\\n  avatar {\\n    large\\n  }\\n'\n</code></pre> <p>This is the BasicUserSchema for the AniList API. It defines the structure of the image data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the user.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The name of the user.</p> <p> TYPE: <code>str</code> </p> <code>avatar</code> <p>The avatar of the user with a large size.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"AniLink/AniList/schemas/#coverimage-schema","title":"CoverImage Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.cover_image_schema.COVERIMAGESCHEMA","title":"COVERIMAGESCHEMA  <code>module-attribute</code>","text":"<pre><code>COVERIMAGESCHEMA = '\\ncoverImage {\\n  extraLarge\\n  large\\n  medium\\n}\\n'\n</code></pre> <p>This is the CoverImageSchema for the Anilist API. It defines the structure of the cover image data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>extraLarge</code> <p>The URL of the extra large cover image.</p> <p> TYPE: <code>str</code> </p> <code>large</code> <p>The URL of the large cover image.</p> <p> TYPE: <code>str</code> </p> <code>medium</code> <p>The URL of the medium cover image.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#distribution-schema","title":"Distribution Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.distribution_schema.SCOREDISTRIBUTIONSCHEMA","title":"SCOREDISTRIBUTIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>SCOREDISTRIBUTIONSCHEMA = '\\n  scoreDistribution {\\n    score\\n    amount\\n  }\\n'\n</code></pre> <p>This is the DistributionSchema for the AniList API. It defines the structure of the distribution data that is expected to be</p> ATTRIBUTE DESCRIPTION <code>score</code> <p>The score of the distribution.</p> <p> TYPE: <code>int</code> </p> <code>amount</code> <p>The amount of the distribution.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.distribution_schema.STATUSDISTRIBUTIONSCHEMA","title":"STATUSDISTRIBUTIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>STATUSDISTRIBUTIONSCHEMA = '\\n  statusDistribution {\\n    status\\n    amount\\n  }\\n'\n</code></pre> <p>This is the DistributionSchema for the AniList API. It defines the structure of the distribution data that is expected to be</p> ATTRIBUTE DESCRIPTION <code>status</code> <p>The status of the distribution.</p> <p> TYPE: <code>str</code> </p> <code>amount</code> <p>The amount of the distribution.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#externallink-schema","title":"ExternalLink Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.external_link_schema.EXTERNALLINKSCHEMA","title":"EXTERNALLINKSCHEMA  <code>module-attribute</code>","text":"<pre><code>EXTERNALLINKSCHEMA = '\\n  externalLinks {\\n    id\\n    url\\n    site\\n  }\\n'\n</code></pre> <p>This is the ExternalLinkSchema for the AniList API. It defines the structure of the external link data that is expected to be</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the external link.</p> <p> TYPE: <code>int</code> </p> <code>url</code> <p>The url of the external link.</p> <p> TYPE: <code>str</code> </p> <code>site</code> <p>The site of the external link.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#fuzzydate-schema","title":"FuzzyDate Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.fuzzy_date_schema.FUZZYDATESCHEMA","title":"FUZZYDATESCHEMA  <code>module-attribute</code>","text":"<pre><code>FUZZYDATESCHEMA = '\\n  year\\n  month\\n  day\\n'\n</code></pre> <p>This is the FuzzyDateSchema for the AniList API. It defines the structure of the image data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>year</code> <p>The year of the date.</p> <p> TYPE: <code>int</code> </p> <code>month</code> <p>The month of the date.</p> <p> TYPE: <code>int</code> </p> <code>day</code> <p>The day of the date.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#image-schema","title":"Image Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.image_schema.IMAGESCHEMA","title":"IMAGESCHEMA  <code>module-attribute</code>","text":"<pre><code>IMAGESCHEMA = '\\nimage {\\n  large\\n  medium\\n}\\n'\n</code></pre> <p>This is the ImageSchema for the Anilist API. It defines the structure of the image data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>large</code> <p>The URL of the large image.</p> <p> TYPE: <code>str</code> </p> <code>medium</code> <p>The URL of the medium image.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#medialistentry-schema","title":"MediaListEntry Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.media_list_entry_schema.MEDIALISTENTRYSCHEMA","title":"MEDIALISTENTRYSCHEMA  <code>module-attribute</code>","text":"<pre><code>MEDIALISTENTRYSCHEMA = '\\n  mediaListEntry {\\n    id\\n    status\\n  }\\n'\n</code></pre> <p>This is the MediaListEntrySchema for the AniList API. It defines the structure of the media list entry data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the media list entry.</p> <p> TYPE: <code>int</code> </p> <code>status</code> <p>The status of the media list entry.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#name-schema","title":"Name Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.name_schema.NAMESCHEMA","title":"NAMESCHEMA  <code>module-attribute</code>","text":"<pre><code>NAMESCHEMA = '\\nname {\\nfirst\\nlast\\nfull\\nnative\\n}\\n'\n</code></pre> <p>This is the NameSchema for the Anilist API. It defines the structure of the name data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>first</code> <p>The user's first name.</p> <p> TYPE: <code>str</code> </p> <code>last</code> <p>The user's last name.</p> <p> TYPE: <code>str</code> </p> <code>full</code> <p>The user's full name.</p> <p> TYPE: <code>str</code> </p> <code>native</code> <p>The user's name in their native language.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#nextairingepisode-schema","title":"NextAiringEpisode Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.next_airing_episode_schema.NEXTAIRINGEPISODESCHEMA","title":"NEXTAIRINGEPISODESCHEMA  <code>module-attribute</code>","text":"<pre><code>NEXTAIRINGEPISODESCHEMA = '\\n  nextAiringEpisode {\\n    airingAt\\n    timeUntilAiring\\n    episode\\n  }\\n'\n</code></pre> <p>This is the NextAiringEpisodeSchema for the AniList API. It defines the structure of the next airing episode data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>airingAt</code> <p>The airing time of the episode.</p> <p> TYPE: <code>int</code> </p> <code>timeUntilAiring</code> <p>The time until the episode airs.</p> <p> TYPE: <code>int</code> </p> <code>episode</code> <p>The episode number.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#notification-schema","title":"Notification Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.notification_schema.THREADNOTIFICATIONSCHEMA","title":"THREADNOTIFICATIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>THREADNOTIFICATIONSCHEMA = f'\n  id\n  userId\n  type\n  commentId\n  context\n  createdAt\n  thread {\n    {BASICTHREADSCHEMA}\n  }\n  comment {\n    {BASICCOMMENTSCHEMA}\n  }\n  user {\n    {BASICUSERSCHEMA}\n  }\n'\n</code></pre> <p>This is the NotificationSchema for the AniList API. It defines the structure of the notification data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the thread notification.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The user id associated with the thread notification.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the thread notification.</p> <p> TYPE: <code>str</code> </p> <code>commentId</code> <p>The comment id associated with the thread notification.</p> <p> TYPE: <code>int</code> </p> <code>context</code> <p>The context of the thread notification.</p> <p> TYPE: <code>str</code> </p> <code>createdAt</code> <p>The creation time of the thread notification.</p> <p> TYPE: <code>str</code> </p> <code>thread</code> <p>The thread associated with the thread notification.</p> <p> TYPE: <code>str</code> </p> <code>comment</code> <p>The comment associated with the thread notification.</p> <p> TYPE: <code>str</code> </p> <code>user</code> <p>The user associated with the thread notification.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#ranking-schema","title":"Ranking Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.ranking_schema.RANKINGSCHEMA","title":"RANKINGSCHEMA  <code>module-attribute</code>","text":"<pre><code>RANKINGSCHEMA = '\\n  rankings {\\n    id\\n    rank\\n    type\\n    format\\n    year\\n    season\\n    allTime\\n    context\\n  }\\n'\n</code></pre> <p>This is the RankingSchema for the AniList API. It defines the structure of the ranking data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the ranking.</p> <p> TYPE: <code>int</code> </p> <code>rank</code> <p>The rank of the ranking.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the ranking.</p> <p> TYPE: <code>str</code> </p> <code>format</code> <p>The format of the ranking.</p> <p> TYPE: <code>str</code> </p> <code>year</code> <p>The year of the ranking.</p> <p> TYPE: <code>int</code> </p> <code>season</code> <p>The season of the ranking.</p> <p> TYPE: <code>str</code> </p> <code>allTime</code> <p>The all-time status of the ranking.</p> <p> TYPE: <code>bool</code> </p> <code>context</code> <p>The context of the ranking.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#sitetrend-schema","title":"SiteTrend Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.site_trend_schema.SITETRENDCONNECTIONSCHEMA","title":"SITETRENDCONNECTIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>SITETRENDCONNECTIONSCHEMA = f'\n  pageInfo {\n    total\n    perPage\n    currentPage\n    lastPage\n    hasNextPage\n  }\n  edges {\n    node {\n      {SITETRENDSCHEMA}\n    }\n  }\n  nodes {\n    {SITETRENDSCHEMA}\n  }\n'\n</code></pre> <p>This is the SiteTrendConnectionSchema for the AniList API. It defines the structure of the site trend connection data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>pageInfo</code> <p>The page information.</p> <p> TYPE: <code>dict</code> </p> <code>edges</code> <p>The edges of the site trend connection.</p> <p> TYPE: <code>dict</code> </p> <code>nodes</code> <p>The nodes of the site trend connection.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.site_trend_schema.SITETRENDSCHEMA","title":"SITETRENDSCHEMA  <code>module-attribute</code>","text":"<pre><code>SITETRENDSCHEMA = '\\n  date\\n  count\\n  change\\n'\n</code></pre> <p>This is the SiteTrendSchema for the AniList API. It defines the structure of the site trend data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>date</code> <p>The date of the site trend.</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>The count of the site trend.</p> <p> TYPE: <code>int</code> </p> <code>change</code> <p>The change of the site trend.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#streamingepisode-schema","title":"StreamingEpisode Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.streaming_episode_schema.STREAMINGEPISODESCHEMA","title":"STREAMINGEPISODESCHEMA  <code>module-attribute</code>","text":"<pre><code>STREAMINGEPISODESCHEMA = '\\n  streamingEpisodes {\\n    title\\n    thumbnail\\n    url\\n    site\\n  }\\n'\n</code></pre> <p>This is the StreamingEpisodeSchema for the AniList API. It defines the structure of the streaming episode data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>title</code> <p>The title of the streaming episode.</p> <p> TYPE: <code>str</code> </p> <code>thumbnail</code> <p>The thumbnail of the streaming episode.</p> <p> TYPE: <code>str</code> </p> <code>url</code> <p>The url of the streaming episode.</p> <p> TYPE: <code>str</code> </p> <code>site</code> <p>The site of the streaming episode.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#tag-schema","title":"Tag Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.tag_schema.TAGSCHEMA","title":"TAGSCHEMA  <code>module-attribute</code>","text":"<pre><code>TAGSCHEMA = '\\nid\\nname\\ndescription\\ncategory\\nrank\\nisGeneralSpoiler\\nisMediaSpoiler\\nisAdult\\nuserId\\n'\n</code></pre> <p>This is the TagSchema for the Anilist API. It defines the structure of the tag data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The tag's ID.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The tag's name.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The tag's description.</p> <p> TYPE: <code>str</code> </p> <code>category</code> <p>The tag's category.</p> <p> TYPE: <code>str</code> </p> <code>rank</code> <p>The tag's rank.</p> <p> TYPE: <code>int</code> </p> <code>isGeneralSpoiler</code> <p>Whether the tag is a general spoiler.</p> <p> TYPE: <code>bool</code> </p> <code>isMediaSpoiler</code> <p>Whether the tag is a media spoiler.</p> <p> TYPE: <code>bool</code> </p> <code>isAdult</code> <p>Whether the tag is adult.</p> <p> TYPE: <code>bool</code> </p> <code>userId</code> <p>The user's ID.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/schemas/#title-schema","title":"Title Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.title_schema.TITLESCHEMA","title":"TITLESCHEMA  <code>module-attribute</code>","text":"<pre><code>TITLESCHEMA = '\\ntitle {\\n  romaji\\n  english\\n  native\\n  userPreferred\\n}\\n'\n</code></pre> <p>This is the TitleSchema for the Anilist API. It defines the structure of the title data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>romaji</code> <p>The title in romaji.</p> <p> TYPE: <code>str</code> </p> <code>english</code> <p>The title in English.</p> <p> TYPE: <code>str</code> </p> <code>native</code> <p>The title in the native language.</p> <p> TYPE: <code>str</code> </p> <code>userPreferred</code> <p>The user's preferred title.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#trailer-schema","title":"Trailer Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.trailer_schema.TRAILERSCHEMA","title":"TRAILERSCHEMA  <code>module-attribute</code>","text":"<pre><code>TRAILERSCHEMA = '\\n  trailer {\\n    id\\n    site\\n    thumbnail\\n  }\\n'\n</code></pre> <p>Trailer schema for AniList GraphQL API</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The ID of the trailer.</p> <p> TYPE: <code>str</code> </p> <code>site</code> <p>The site of the trailer.</p> <p> TYPE: <code>str</code> </p> <code>thumbnail</code> <p>The thumbnail of the trailer.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/schemas/#userstats-schema","title":"UserStats Schema","text":""},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.user_stats_schema.USERANIMESTATSSCHEMA","title":"USERANIMESTATSSCHEMA  <code>module-attribute</code>","text":"<pre><code>USERANIMESTATSSCHEMA = '\\ncount\\nmeanScore\\nminutesWatched\\nmediaIds\\n'\n</code></pre> <p>This is the UserAnimeStatsSchema for the Anilist API. It defines the structure of the user's anime statistics data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>count</code> <p>The count of anime the user has watched.</p> <p> TYPE: <code>int</code> </p> <code>meanScore</code> <p>The mean score of the anime the user has watched.</p> <p> TYPE: <code>float</code> </p> <code>minutesWatched</code> <p>The total minutes the user has watched anime.</p> <p> TYPE: <code>int</code> </p> <code>mediaIds</code> <p>The list of IDs of the anime the user has watched.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/schemas/#AniLinkPy.apis.anilist.schemas.user_stats_schema.USERMANGASTATSSCHEMA","title":"USERMANGASTATSSCHEMA  <code>module-attribute</code>","text":"<pre><code>USERMANGASTATSSCHEMA = '\\ncount\\nmeanScore\\nchaptersRead\\nmediaIds\\n'\n</code></pre> <p>This is the UserMangaStatsSchema for the Anilist API. It defines the structure of the user's manga statistics data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>count</code> <p>The count of manga the user has read.</p> <p> TYPE: <code>int</code> </p> <code>meanScore</code> <p>The mean score of the manga the user has read.</p> <p> TYPE: <code>float</code> </p> <code>chaptersRead</code> <p>The total chapters the user has read in manga.</p> <p> TYPE: <code>int</code> </p> <code>mediaIds</code> <p>The list of IDs of the manga the user has read.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/Mutations/","title":"Anilist Mutation Documentation","text":"<p>This module contains the Mutation class which represents a mutation in the AniLink API.</p>"},{"location":"AniLink/AniList/Mutations/#AniLinkPy.apis.anilist.mutation.mutation.Mutation","title":"Mutation","text":"<p>This class represents a Mutation in the AniLink API.</p>"},{"location":"AniLink/AniList/Mutations/schemas/","title":"Mutation Schemas Documentation","text":"<p>This is the documentation for the Mutation schemas.</p>"},{"location":"AniLink/AniList/Mutations/schemas/#favorites-schema","title":"Favorites Schema","text":""},{"location":"AniLink/AniList/Mutations/schemas/#AniLinkPy.apis.anilist.schemas.mutation.favorites_schema.FAVORITESSCHEMA","title":"FAVORITESSCHEMA  <code>module-attribute</code>","text":"<pre><code>FAVORITESSCHEMA = f'\n  anime {\n    edges {\n      id\n      node {\n        id\n        {TITLESCHEMA}\n      }\n    }\n    nodes {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  manga {\n    edges {\n      id\n      node {\n        id\n        {TITLESCHEMA}\n      }\n    }\n    nodes {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  characters {\n    edges {\n      id\n      node {\n        id\n        name {\n          full\n        }\n      }\n    }\n    nodes {\n      id\n      name {\n        full\n      }\n    }\n  }\n  staff {\n    edges {\n      id\n      node {\n        id\n        name {\n          full\n        }\n      }\n    }\n    nodes {\n      id\n      name {\n        full\n      }\n    }\n  }\n  studios {\n    edges {\n      id\n      node {\n        id\n        name\n      }\n    }\n    nodes {\n      id\n      name\n    }\n  }\n'\n</code></pre> <p>FavouritesSchema is a string representing the GraphQL schema for a favourites query. It includes the anime, manga, characters, staff, and studios schema.</p> ATTRIBUTE DESCRIPTION <code>anime</code> <p>The anime schema of the favourites.</p> <p> TYPE: <code>str</code> </p> <code>manga</code> <p>The manga schema of the favourites.</p> <p> TYPE: <code>str</code> </p> <code>characters</code> <p>The characters schema of the favourites.</p> <p> TYPE: <code>str</code> </p> <code>staff</code> <p>The staff schema of the favourites.</p> <p> TYPE: <code>str</code> </p> <code>studios</code> <p>The studios schema of the favourites.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/","title":"Query Schemas Documentation","text":"<p>This is the documentation for the Query schemas.</p>"},{"location":"AniLink/AniList/Queries/schemas/#airing-schedule-schema","title":"Airing Schedule Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.airing_schedule_schema.AIRINGSCHEDULESCHEMA","title":"AIRINGSCHEDULESCHEMA  <code>module-attribute</code>","text":"<pre><code>AIRINGSCHEDULESCHEMA = f'\n  id\n  airingAt\n  timeUntilAiring\n  episode\n  mediaId\n  media {\n    {MEDIASCHEMA}\n  }\n'\n</code></pre> <p>AiringScheduleSchema is a string representing the GraphQL schema for an airing schedule query. It includes the id, airing time, time until airing, episode number, media id, and the media schema.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the airing schedule.</p> <p> TYPE: <code>int</code> </p> <code>airingAt</code> <p>The airing time of the airing schedule.</p> <p> TYPE: <code>int</code> </p> <code>timeUntilAiring</code> <p>The time until airing of the airing schedule.</p> <p> TYPE: <code>int</code> </p> <code>episode</code> <p>The episode number of the airing schedule.</p> <p> TYPE: <code>int</code> </p> <code>mediaId</code> <p>The media id of the airing schedule.</p> <p> TYPE: <code>int</code> </p> <code>media</code> <p>The media schema of the airing schedule.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#character-schema","title":"Character Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.character_schema.CHARACTERSCHEMA","title":"CHARACTERSCHEMA  <code>module-attribute</code>","text":"<pre><code>CHARACTERSCHEMA = f'\n  id\n  {NAMESCHEMA}\n  {IMAGESCHEMA}\n  description(asHtml: $asHtml)\n  gender\n  dateOfBirth {\n    {FUZZYDATESCHEMA}\n  }\n  age\n  bloodType\n  isFavourite\n  isFavouriteBlocked\n  siteUrl\n  media(sort: $mediaSort, onList: $mediaOnList, page: $mediaPage, perPage: $mediaPerPage) {\n    nodes {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  favourites\n  modNotes\n'\n</code></pre> <p>CharacterSchema is a string representing the GraphQL schema for a character query. It includes the character's id, name, image, description, gender, date of birth, age, blood type, favourite status, site URL, associated media, number of favourites, and moderator notes.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the character.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The name schema of the character.</p> <p> TYPE: <code>str</code> </p> <code>image</code> <p>The image schema of the character.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the character.</p> <p> TYPE: <code>str</code> </p> <code>gender</code> <p>The gender of the character.</p> <p> TYPE: <code>str</code> </p> <code>dateOfBirth</code> <p>The fuzzy date schema of the character's date of birth.</p> <p> TYPE: <code>str</code> </p> <code>age</code> <p>The age of the character.</p> <p> TYPE: <code>int</code> </p> <code>bloodType</code> <p>The blood type of the character.</p> <p> TYPE: <code>str</code> </p> <code>isFavourite</code> <p>The favourite status of the character.</p> <p> TYPE: <code>bool</code> </p> <code>isFavouriteBlocked</code> <p>The favourite blocked status of the character.</p> <p> TYPE: <code>bool</code> </p> <code>siteUrl</code> <p>The site URL of the character.</p> <p> TYPE: <code>str</code> </p> <code>media</code> <p>The media schema of the character.</p> <p> TYPE: <code>str</code> </p> <code>favourites</code> <p>The number of favourites of the character.</p> <p> TYPE: <code>int</code> </p> <code>modNotes</code> <p>The moderator notes of the character.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#media-list-collection-schema","title":"Media List Collection Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.media_list_collection_schema.MEDIALISTCOLLECTIONSCHEMA","title":"MEDIALISTCOLLECTIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>MEDIALISTCOLLECTIONSCHEMA = f'\n  lists {\n    entries {\n      {MEDIALISTSCHEMA}\n    name\n    isCustomList\n    isSplitCompletedList\n    status\n    }\n  hasNextChunk\n  }\n'\n</code></pre> <p>MediaListCollectionQuerySchema is a string representing the GraphQL schema for a media list collection query. It includes the media list collection, lists, entries, user, and hasNextChunk status.</p> ATTRIBUTE DESCRIPTION <code>lists</code> <p>The lists of the media list collection.</p> <p> TYPE: <code>list</code> </p> <code>entries</code> <p>The entries of the media list collection.</p> <p> TYPE: <code>list</code> </p> <code>hasNextChunk</code> <p>The hasNextChunk status of the media list collection.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#media-list-schema","title":"Media List Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.media_list_schema.MEDIALISTSCHEMA","title":"MEDIALISTSCHEMA  <code>module-attribute</code>","text":"<pre><code>MEDIALISTSCHEMA = f'\n  id\n  userId\n  mediaId\n  status\n  score (format: $ScoreFormat)\n  progress\n  progressVolumes\n  repeat\n  priority\n  private\n  notes\n  hiddenFromStatusLists\n  customLists (asArray: $asArray)\n  advancedScores\n  startedAt {\n    {FUZZYDATESCHEMA}\n  }\n  completedAt {\n    {FUZZYDATESCHEMA}\n  }\n  updatedAt\n  createdAt\n  media {\n    {MEDIASCHEMA}\n  }\n'\n</code></pre> <p>MediaListSchema is a string representing the GraphQL schema for a media list query. It includes the id, user id, media id, status, score, progress, progress volumes, repeat, priority, private status, notes, hidden from status lists status, custom lists, advanced scores, started at date, completed at date, updated at timestamp, created at timestamp, media, and user.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the media list.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The user id of the media list.</p> <p> TYPE: <code>int</code> </p> <code>mediaId</code> <p>The media id of the media list.</p> <p> TYPE: <code>int</code> </p> <code>status</code> <p>The status of the media list.</p> <p> TYPE: <code>str</code> </p> <code>score</code> <p>The score of the media list.</p> <p> TYPE: <code>str</code> </p> <code>progress</code> <p>The progress of the media list.</p> <p> TYPE: <code>int</code> </p> <code>progressVolumes</code> <p>The progress volumes of the media list.</p> <p> TYPE: <code>int</code> </p> <code>repeat</code> <p>The repeat of the media list.</p> <p> TYPE: <code>int</code> </p> <code>priority</code> <p>The priority of the media list.</p> <p> TYPE: <code>int</code> </p> <code>private</code> <p>The private status of the media list.</p> <p> TYPE: <code>bool</code> </p> <code>notes</code> <p>The notes of the media list.</p> <p> TYPE: <code>str</code> </p> <code>hiddenFromStatusLists</code> <p>The hidden from status lists status of the media list.</p> <p> TYPE: <code>bool</code> </p> <code>customLists</code> <p>The custom lists of the media list.</p> <p> TYPE: <code>str</code> </p> <code>advancedScores</code> <p>The advanced scores of the media list.</p> <p> TYPE: <code>list</code> </p> <code>startedAt</code> <p>The started at date of the media list.</p> <p> TYPE: <code>str</code> </p> <code>completedAt</code> <p>The completed at date of the media list.</p> <p> TYPE: <code>str</code> </p> <code>updatedAt</code> <p>The updated at timestamp of the media list.</p> <p> TYPE: <code>int</code> </p> <code>createdAt</code> <p>The created at timestamp of the media list.</p> <p> TYPE: <code>int</code> </p> <code>media</code> <p>The media of the media list.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#media-schema","title":"Media Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.media_schema.MEDIASCHEMA","title":"MEDIASCHEMA  <code>module-attribute</code>","text":"<pre><code>MEDIASCHEMA = f'\n  id\n  idMal\n  {TITLESCHEMA}\n  type\n  format\n  status\n  description (asHtml: $asHtml)\n  startDate {\n    {FUZZYDATESCHEMA}\n  }\n  endDate {\n    {FUZZYDATESCHEMA}\n  }\n  season\n  seasonYear\n  seasonInt\n  episodes\n  duration\n  chapters\n  volumes\n  countryOfOrigin\n  isLicensed\n  source\n  hashtag\n  {TRAILERSCHEMA}\n  updatedAt\n  {COVERIMAGESCHEMA}\n  bannerImage\n  genres\n  synonyms\n  averageScore\n  meanScore\n  popularity\n  isLocked\n  trending\n  favourites\n  tags {\n    {TAGSCHEMA}\n  }\n  isFavourite\n  isAdult\n  {NEXTAIRINGEPISODESCHEMA}\n  {EXTERNALLINKSCHEMA}\n  {STREAMINGEPISODESCHEMA}\n  {RANKINGSCHEMA}\n  {MEDIALISTENTRYSCHEMA}\n  stats {\n    {STATUSDISTRIBUTIONSCHEMA}\n    {SCOREDISTRIBUTIONSCHEMA}\n  }\n  siteUrl\n  autoCreateForumThread\n  isRecommendationBlocked\n  modNotes\n'\n</code></pre> <p>This is the MediaSchema for the AniList API. It defines the structure of the media data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The media's ID.</p> <p> TYPE: <code>int</code> </p> <code>idMal</code> <p>The media's ID on MyAnimeList.</p> <p> TYPE: <code>int</code> </p> <code>title</code> <p>The media's title, with 'romaji', 'english', and 'native' versions.</p> <p> TYPE: <code>dict</code> </p> <code>type</code> <p>The type of the media (e.g., ANIME or MANGA).</p> <p> TYPE: <code>str</code> </p> <code>format</code> <p>The format of the media (e.g., TV, TV_SHORT, MOVIE, SPECIAL, OVA, ONA, MUSIC, MANGA, NOVEL, ONE_SHOT).</p> <p> TYPE: <code>str</code> </p> <code>status</code> <p>The status of the media (e.g., FINISHED, RELEASING, NOT_YET_RELEASED, CANCELLED).</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The media's description.</p> <p> TYPE: <code>str</code> </p> <code>startDate</code> <p>The media's start date, with 'year', 'month', and 'day'.</p> <p> TYPE: <code>dict</code> </p> <code>endDate</code> <p>The media's end date, with 'year', 'month', and 'day'.</p> <p> TYPE: <code>dict</code> </p> <code>season</code> <p>The media's season (e.g., WINTER, SPRING, SUMMER, FALL).</p> <p> TYPE: <code>str</code> </p> <code>seasonYear</code> <p>The year of the media's season.</p> <p> TYPE: <code>int</code> </p> <code>seasonInt</code> <p>The integer representation of the media's season.</p> <p> TYPE: <code>int</code> </p> <code>episodes</code> <p>The number of episodes in the media.</p> <p> TYPE: <code>int</code> </p> <code>duration</code> <p>The duration of each episode in the media.</p> <p> TYPE: <code>int</code> </p> <code>chapters</code> <p>The number of chapters in the media.</p> <p> TYPE: <code>int</code> </p> <code>volumes</code> <p>The number of volumes in the media.</p> <p> TYPE: <code>int</code> </p> <code>countryOfOrigin</code> <p>The country of origin of the media.</p> <p> TYPE: <code>str</code> </p> <code>isLicensed</code> <p>Whether the media is licensed.</p> <p> TYPE: <code>bool</code> </p> <code>source</code> <p>The source of the media (e.g., ORIGINAL, MANGA, LIGHT_NOVEL, VISUAL_NOVEL, VIDEO_GAME, OTHER).</p> <p> TYPE: <code>str</code> </p> <code>hashtag</code> <p>The media's hashtag.</p> <p> TYPE: <code>str</code> </p> <code>updatedAt</code> <p>The timestamp of when the media was last updated.</p> <p> TYPE: <code>int</code> </p> <code>coverImage</code> <p>The media's cover image, with 'extraLarge', 'large', 'medium', and 'color' versions.</p> <p> TYPE: <code>dict</code> </p> <code>bannerImage</code> <p>The URL of the media's banner image.</p> <p> TYPE: <code>str</code> </p> <code>genres</code> <p>The media's genres.</p> <p> TYPE: <code>list</code> </p> <code>synonyms</code> <p>The media's synonyms.</p> <p> TYPE: <code>list</code> </p> <code>averageScore</code> <p>The media's average score.</p> <p> TYPE: <code>int</code> </p> <code>meanScore</code> <p>The media's mean score.</p> <p> TYPE: <code>int</code> </p> <code>popularity</code> <p>The media's popularity.</p> <p> TYPE: <code>int</code> </p> <code>isLocked</code> <p>Whether the media is locked.</p> <p> TYPE: <code>bool</code> </p> <code>trending</code> <p>The media's trending rank.</p> <p> TYPE: <code>int</code> </p> <code>favourites</code> <p>The number of users who have the media in their favourites.</p> <p> TYPE: <code>int</code> </p> <code>tags</code> <p>The media's tags.</p> <p> TYPE: <code>list</code> </p> <code>isFavourite</code> <p>Whether the media is a favourite.</p> <p> TYPE: <code>bool</code> </p> <code>isAdult</code> <p>Whether the media is for adults.</p> <p> TYPE: <code>bool</code> </p> <code>nextAiringEpisode</code> <p>The media's next airing episode, with 'airingAt', 'timeUntilAiring', and 'episode'.</p> <p> TYPE: <code>dict</code> </p> <code>externalLinks</code> <p>The media's external links.</p> <p> TYPE: <code>list</code> </p> <code>streamingEpisodes</code> <p>The media's streaming episodes.</p> <p> TYPE: <code>list</code> </p> <code>rankings</code> <p>The media's rankings.</p> <p> TYPE: <code>list</code> </p> <code>mediaListEntry</code> <p>The media's list entry.</p> <p> TYPE: <code>dict</code> </p> <code>stats</code> <p>The media's stats.</p> <p> TYPE: <code>dict</code> </p> <code>siteUrl</code> <p>The media's site URL.</p> <p> TYPE: <code>str</code> </p> <code>autoCreateForumThread</code> <p>Whether a forum thread is automatically created for the media.</p> <p> TYPE: <code>bool</code> </p> <code>isRecommendationBlocked</code> <p>Whether recommendation is blocked for the media.</p> <p> TYPE: <code>bool</code> </p> <code>modNotes</code> <p>The moderator's notes for the media.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#media-trend-schema","title":"Media Trend Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.media_trend_schema.MEDIATRENDSCHEMA","title":"MEDIATRENDSCHEMA  <code>module-attribute</code>","text":"<pre><code>MEDIATRENDSCHEMA = f'\n  mediaId\n  date\n  trending\n  averageScore\n  popularity\n  inProgress\n  releasing\n  episode\n  media {\n    {MEDIASCHEMA}\n  }\n'\n</code></pre> <p>MediaTrendSchema is a string representing the GraphQL schema for a media trend query. It includes the media's id, date, trending status, average score, popularity, in progress status, releasing status, episode number, and media of type <code>Media</code>.</p> ATTRIBUTE DESCRIPTION <code>mediaId</code> <p>The id of the media.</p> <p> TYPE: <code>int</code> </p> <code>date</code> <p>The date of the media trend.</p> <p> TYPE: <code>int</code> </p> <code>trending</code> <p>The trending status of the media.</p> <p> TYPE: <code>int</code> </p> <code>averageScore</code> <p>The average score of the media.</p> <p> TYPE: <code>int</code> </p> <code>popularity</code> <p>The popularity of the media.</p> <p> TYPE: <code>int</code> </p> <code>inProgress</code> <p>The in progress status of the media.</p> <p> TYPE: <code>bool</code> </p> <code>releasing</code> <p>The releasing status of the media.</p> <p> TYPE: <code>bool</code> </p> <code>episode</code> <p>The episode number of the media.</p> <p> TYPE: <code>int</code> </p> <code>media</code> <p>The media schema of the media.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#media-with-relations-schema","title":"Media With Relations Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.media_with_relations_schema.MEDIAWITHRELATIONSSCHEMA","title":"MEDIAWITHRELATIONSSCHEMA  <code>module-attribute</code>","text":"<pre><code>MEDIAWITHRELATIONSSCHEMA = f'\n  id\n  idMal\n  {TITLESCHEMA}\n  type\n  format\n  status\n  description (asHtml: $asHtml)\n  startDate {\n    {FUZZYDATESCHEMA}\n  }\n  endDate {\n    {FUZZYDATESCHEMA}\n  }\n  season\n  seasonYear\n  seasonInt\n  episodes\n  duration\n  chapters\n  volumes\n  countryOfOrigin\n  isLicensed\n  source\n  hashtag\n  {TRAILERSCHEMA}\n  updatedAt\n  {COVERIMAGESCHEMA}\n  bannerImage\n  genres\n  synonyms\n  averageScore\n  meanScore\n  popularity\n  isLocked\n  trending\n  favourites\n  tags {\n    {TAGSCHEMA}\n  }\n  relations {\n    edges {\n      id\n      relationType\n      isMainStudio\n      characters {\n        id\n        {NAMESCHEMA}\n        {IMAGESCHEMA}\n        description (asHtml: $asHtml)\n        gender\n        dateOfBirth {\n          {FUZZYDATESCHEMA}\n        }\n        age\n        bloodType\n        isFavourite\n        isFavouriteBlocked\n        siteUrl\n        favourites\n        modNotes\n      }\n      characterRole\n      characterName\n      roleNotes\n      dubGroup\n      staffRole\n      node {\n        id\n        {TITLESCHEMA}\n      }\n    }\n  }\n  characters {\n    edges {\n      id\n      role\n      name\n      voiceActors {\n        id\n        {NAMESCHEMA}\n        {IMAGESCHEMA}\n      }\n      media {\n        id\n        {TITLESCHEMA}\n        {COVERIMAGESCHEMA}\n      }\n      favouriteOrder\n      node {\n        id\n        {NAMESCHEMA}\n        {IMAGESCHEMA}\n      }\n    }\n  }\n  staff {\n    edges {\n      id\n      role\n      favouriteOrder\n      node {\n        id\n        {NAMESCHEMA}\n        {IMAGESCHEMA}\n      }\n    }\n  }\n  studios {\n    edges {\n      id\n      isMain\n      favouriteOrder\n      node {\n        id\n        name\n        isAnimationStudio\n        siteUrl\n      }\n    }\n  }\n  isFavourite\n  isAdult\n  {NEXTAIRINGEPISODESCHEMA}\n  {EXTERNALLINKSCHEMA}\n  {STREAMINGEPISODESCHEMA}\n  {RANKINGSCHEMA}\n  {MEDIALISTENTRYSCHEMA}\n  stats {\n    {STATUSDISTRIBUTIONSCHEMA}\n    {SCOREDISTRIBUTIONSCHEMA}\n  }\n  siteUrl\n  autoCreateForumThread\n  isRecommendationBlocked\n  modNotes\n'\n</code></pre> <p>This is the schema for a media with relations Query.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The media's ID.</p> <p> TYPE: <code>int</code> </p> <code>idMal</code> <p>The media's ID on MyAnimeList.</p> <p> TYPE: <code>int</code> </p> <code>title</code> <p>The media's title, with 'romaji', 'english', and 'native' versions.</p> <p> TYPE: <code>dict</code> </p> <code>type</code> <p>The type of the media (e.g., ANIME or MANGA).</p> <p> TYPE: <code>str</code> </p> <code>format</code> <p>The format of the media (e.g., TV, TV_SHORT, MOVIE, SPECIAL, OVA, ONA, MUSIC, MANGA, NOVEL, ONE_SHOT).</p> <p> TYPE: <code>str</code> </p> <code>status</code> <p>The status of the media (e.g., FINISHED, RELEASING, NOT_YET_RELEASED, CANCELLED).</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The media's description.</p> <p> TYPE: <code>str</code> </p> <code>startDate</code> <p>The media's start date, with 'year', 'month', and 'day'.</p> <p> TYPE: <code>dict</code> </p> <code>endDate</code> <p>The media's end date, with 'year', 'month', and 'day'.</p> <p> TYPE: <code>dict</code> </p> <code>season</code> <p>The media's season (e.g., WINTER, SPRING, SUMMER, FALL).</p> <p> TYPE: <code>str</code> </p> <code>seasonYear</code> <p>The year of the media's season.</p> <p> TYPE: <code>int</code> </p> <code>seasonInt</code> <p>The integer representation of the media's season.</p> <p> TYPE: <code>int</code> </p> <code>episodes</code> <p>The number of episodes in the media.</p> <p> TYPE: <code>int</code> </p> <code>duration</code> <p>The duration of each episode in the media.</p> <p> TYPE: <code>int</code> </p> <code>chapters</code> <p>The number of chapters in the media.</p> <p> TYPE: <code>int</code> </p> <code>volumes</code> <p>The number of volumes in the media.</p> <p> TYPE: <code>int</code> </p> <code>countryOfOrigin</code> <p>The country of origin of the media.</p> <p> TYPE: <code>str</code> </p> <code>isLicensed</code> <p>Whether the media is licensed.</p> <p> TYPE: <code>bool</code> </p> <code>source</code> <p>The source of the media (e.g., ORIGINAL, MANGA, LIGHT_NOVEL, VISUAL_NOVEL, VIDEO_GAME, OTHER).</p> <p> TYPE: <code>str</code> </p> <code>hashtag</code> <p>The media's hashtag.</p> <p> TYPE: <code>str</code> </p> <code>updatedAt</code> <p>The timestamp of when the media was last updated.</p> <p> TYPE: <code>int</code> </p> <code>coverImage</code> <p>The media's cover image, with 'extraLarge', 'large', 'medium', and 'color' versions.</p> <p> TYPE: <code>dict</code> </p> <code>bannerImage</code> <p>The URL of the media's banner image.</p> <p> TYPE: <code>str</code> </p> <code>genres</code> <p>The media's genres.</p> <p> TYPE: <code>list</code> </p> <code>synonyms</code> <p>The media's synonyms.</p> <p> TYPE: <code>list</code> </p> <code>averageScore</code> <p>The media's average score.</p> <p> TYPE: <code>int</code> </p> <code>meanScore</code> <p>The media's mean score.</p> <p> TYPE: <code>int</code> </p> <code>popularity</code> <p>The media's popularity.</p> <p> TYPE: <code>int</code> </p> <code>isLocked</code> <p>Whether the media is locked.</p> <p> TYPE: <code>bool</code> </p> <code>trending</code> <p>The media's trending rank.</p> <p> TYPE: <code>int</code> </p> <code>favourites</code> <p>The number of users who have the media in their favourites.</p> <p> TYPE: <code>int</code> </p> <code>tags</code> <p>The media's tags.</p> <p> TYPE: <code>list</code> </p> <code>isFavourite</code> <p>Whether the media is a favourite.</p> <p> TYPE: <code>bool</code> </p> <code>isAdult</code> <p>Whether the media is for adults.</p> <p> TYPE: <code>bool</code> </p> <code>nextAiringEpisode</code> <p>The media's next airing episode, with 'airingAt', 'timeUntilAiring', and 'episode'.</p> <p> TYPE: <code>dict</code> </p> <code>externalLinks</code> <p>The media's external links.</p> <p> TYPE: <code>list</code> </p> <code>streamingEpisodes</code> <p>The media's streaming episodes.</p> <p> TYPE: <code>list</code> </p> <code>rankings</code> <p>The media's rankings.</p> <p> TYPE: <code>list</code> </p> <code>mediaListEntry</code> <p>The media's list entry.</p> <p> TYPE: <code>dict</code> </p> <code>stats</code> <p>The media's stats.</p> <p> TYPE: <code>dict</code> </p> <code>siteUrl</code> <p>The media's site URL.</p> <p> TYPE: <code>str</code> </p> <code>autoCreateForumThread</code> <p>Whether a forum thread is automatically created for the media.</p> <p> TYPE: <code>bool</code> </p> <code>isRecommendationBlocked</code> <p>Whether recommendation is blocked for the media.</p> <p> TYPE: <code>bool</code> </p> <code>modNotes</code> <p>The moderator's notes for the media.</p> <p> TYPE: <code>str</code> </p> <code>relations</code> <p>The media's relations with other entities, including characters, staff, and studios.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#notification-schema","title":"Notification Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.notification_schema.NOTIFICATIONSCHEMA","title":"NOTIFICATIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>NOTIFICATIONSCHEMA = f'\n  ... on AiringNotification {\n    id\n    type\n    animeId\n    episode\n    contexts\n    createdAt\n    media {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  ... on FollowingNotification {\n    id\n    type\n    userId\n    context\n    createdAt\n    user {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on ActivityMessageNotification {\n    id\n    userId\n    type\n    activityId\n    context\n    createdAt\n    message {\n      id\n      recipientId\n      messengerId\n      type\n      replyCount\n      message (asHtml: $asHtml)\n      isLocked\n      isSubscribed\n      likeCount\n      isLiked\n      isPrivate\n      siteUrl\n      createdAt\n      replies {\n        id\n        userId\n        activityId\n        text (asHtml: $asHtml)\n        createdAt\n        likeCount\n        isLiked\n        user {\n          {BASICUSERSCHEMA}\n        }\n        likes {\n          {BASICUSERSCHEMA}\n        }\n      }\n      likes {\n        {BASICUSERSCHEMA}\n      }\n    }\n    user {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on ActivityMentionNotification {\n    {ACTIVITYNOTIFICATIONSCHEMA}\n  }\n  ... on ActivityReplyNotification {\n    {ACTIVITYNOTIFICATIONSCHEMA}\n  }\n  ... on ActivityReplySubscribedNotification {\n    {ACTIVITYNOTIFICATIONSCHEMA}\n  }\n  ... on ActivityLikeNotification {\n    {ACTIVITYNOTIFICATIONSCHEMA}\n  }\n  ... on ActivityReplyLikeNotification {\n    {ACTIVITYNOTIFICATIONSCHEMA}\n  }\n  ... on ThreadCommentMentionNotification {\n    {THREADNOTIFICATIONSCHEMA}\n  }\n  ... on ThreadCommentReplyNotification {\n    {THREADNOTIFICATIONSCHEMA}\n  }\n  ... on ThreadCommentSubscribedNotification {\n    {THREADNOTIFICATIONSCHEMA}\n  }\n  ... on ThreadCommentLikeNotification {\n    {THREADNOTIFICATIONSCHEMA}\n  }\n  ... on ThreadLikeNotification {\n    id\n    userId\n    type\n    context\n    createdAt\n    thread {\n      ${BasicThreadSchema}\n    }\n    comment {\n      {BASICCOMMENTSCHEMA}\n    }\n    user {\n      {BASICUSERSCHEMA}\n    }\n  }\n  ... on RelatedMediaAdditionNotification {\n    id\n    type\n    mediaId\n    context\n    createdAt\n    media {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  ... on MediaDataChangeNotification {\n    id\n    type\n    mediaId\n    context\n    reason\n    createdAt\n    media {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  ... on MediaMergeNotification {\n    id\n    type\n    mediaId\n    deletedMediaTitles\n    context\n    reason\n    createdAt\n    media {\n      id\n      {TITLESCHEMA}\n    }\n  }\n  ... on MediaDeletionNotification {\n    id\n    type\n    deletedMediaTitle\n    context\n    reason\n    createdAt\n  }\n'\n</code></pre> <p>NotificationSchema is a string representing the GraphQL schema for a notification query. It includes various types of notifications such as AiringNotification, FollowingNotification, ActivityMessageNotification, ActivityMentionNotification, ActivityReplyNotification, ActivityReplySubscribedNotification, ActivityLikeNotification, ActivityReplyLikeNotification, ThreadCommentMentionNotification, ThreadCommentReplyNotification, ThreadCommentSubscribedNotification, ThreadCommentLikeNotification, ThreadLikeNotification, RelatedMediaAdditionNotification, MediaDataChangeNotification, MediaMergeNotification, and MediaDeletionNotification.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the notification.</p> <p> TYPE: <code>int</code> </p> <code>type</code> <p>The type of the notification.</p> <p> TYPE: <code>str</code> </p> <code>animeId</code> <p>The anime id of the notification.</p> <p> TYPE: <code>int</code> </p> <code>episode</code> <p>The episode of the notification.</p> <p> TYPE: <code>int</code> </p> <code>contexts</code> <p>The contexts of the notification.</p> <p> TYPE: <code>list</code> </p> <code>createdAt</code> <p>The created at timestamp of the notification.</p> <p> TYPE: <code>int</code> </p> <code>media</code> <p>The media schema of the notification.</p> <p> TYPE: <code>str</code> </p> <code>userId</code> <p>The user id of the notification.</p> <p> TYPE: <code>int</code> </p> <code>context</code> <p>The context of the notification.</p> <p> TYPE: <code>str</code> </p> <code>user</code> <p>The basic user schema of the notification.</p> <p> TYPE: <code>str</code> </p> <code>activityId</code> <p>The activity id of the notification.</p> <p> TYPE: <code>int</code> </p> <code>message</code> <p>The message of the notification.</p> <p> TYPE: <code>str</code> </p> <code>thread</code> <p>The basic thread schema of the notification.</p> <p> TYPE: <code>str</code> </p> <code>comment</code> <p>The basic comment schema of the notification.</p> <p> TYPE: <code>str</code> </p> <code>mediaId</code> <p>The media id of the notification.</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>The reason of the notification.</p> <p> TYPE: <code>str</code> </p> <code>deletedMediaTitles</code> <p>The deleted media titles of the notification.</p> <p> TYPE: <code>list</code> </p> <code>deletedMediaTitle</code> <p>The deleted media title of the notification.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#recommendation-schema","title":"Recommendation Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.recommendation_schema.RECOMMENDATIONSCHEMA","title":"RECOMMENDATIONSCHEMA  <code>module-attribute</code>","text":"<pre><code>RECOMMENDATIONSCHEMA = f'\n  id\n  rating\n  userRating\n  media {\n    {MEDIASCHEMA}\n  }\n  mediaRecommendation {\n    {MEDIASCHEMA}\n  }\n  user {\n    {BASICUSERSCHEMA}\n  }\n'\n</code></pre> <p>RecommendationSchema is a string representing the GraphQL schema for a recommendation query. It includes the id, rating, user rating, media, media recommendation, and user.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the recommendation.</p> <p> TYPE: <code>int</code> </p> <code>rating</code> <p>The rating of the recommendation.</p> <p> TYPE: <code>int</code> </p> <code>userRating</code> <p>The user rating of the recommendation.</p> <p> TYPE: <code>int</code> </p> <code>media</code> <p>The media schema of the recommendation.</p> <p> TYPE: <code>str</code> </p> <code>mediaRecommendation</code> <p>The media recommendation schema of the recommendation.</p> <p> TYPE: <code>str</code> </p> <code>user</code> <p>The basic user schema of the recommendation.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#review-schema","title":"Review Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.review_schema.REVIEWSCHEMA","title":"REVIEWSCHEMA  <code>module-attribute</code>","text":"<pre><code>REVIEWSCHEMA = f'\n  id\n  mediaId\n  userId\n  mediaType\n  summary\n  body (asHtml: $asHtml)\n  rating\n  ratingAmount\n  score\n  private\n  siteUrl\n  createdAt\n  updatedAt\n  user {\n    {BASICUSERSCHEMA}\n  }\n  media {\n    {MEDIASCHEMA}\n  }\n'\n</code></pre> <p>ReviewSchema is a string representing the GraphQL schema for a review query. It includes the id, mediaId, userId, mediaType, summary, body, rating, ratingAmount, score, private status, siteUrl, createdAt, updatedAt, user, and media.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the review.</p> <p> TYPE: <code>int</code> </p> <code>mediaId</code> <p>The media id of the review.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The user id of the review.</p> <p> TYPE: <code>int</code> </p> <code>mediaType</code> <p>The media type of the review.</p> <p> TYPE: <code>str</code> </p> <code>summary</code> <p>The summary of the review.</p> <p> TYPE: <code>str</code> </p> <code>body</code> <p>The body of the review.</p> <p> TYPE: <code>str</code> </p> <code>rating</code> <p>The rating of the review.</p> <p> TYPE: <code>int</code> </p> <code>ratingAmount</code> <p>The rating amount of the review.</p> <p> TYPE: <code>int</code> </p> <code>score</code> <p>The score of the review.</p> <p> TYPE: <code>int</code> </p> <code>private</code> <p>The private status of the review.</p> <p> TYPE: <code>bool</code> </p> <code>siteUrl</code> <p>The site url of the review.</p> <p> TYPE: <code>str</code> </p> <code>createdAt</code> <p>The created at timestamp of the review.</p> <p> TYPE: <code>int</code> </p> <code>updatedAt</code> <p>The updated at timestamp of the review.</p> <p> TYPE: <code>int</code> </p> <code>user</code> <p>The basic user schema of the review.</p> <p> TYPE: <code>str</code> </p> <code>media</code> <p>The media schema of the review.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#site-statistics-schema","title":"Site Statistics Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.site_statistics_schema.SITESTATISTICSSCHEMA","title":"SITESTATISTICSSCHEMA  <code>module-attribute</code>","text":"<pre><code>SITESTATISTICSSCHEMA = f'\n  users (sort: $usersSort, page: $usersPage, perPage: $usersPerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n  anime (sort: $animeSort, page: $animePage, perPage: $animePerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n  manga (sort: $mangaSort, page: $mangaPage, perPage: $mangaPerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n  characters (sort: $charactersSort, page: $charactersPage, perPage: $charactersPerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n  staff (sort: $staffSort, page: $staffPage, perPage: $staffPerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n  studios (sort: $studiosSort, page: $studiosPage, perPage: $studiosPerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n  reviews (sort: $reviewsSort, page: $reviewsPage, perPage: $reviewsPerPage) {\n    {SITETRENDCONNECTIONSCHEMA}\n  }\n'\n</code></pre> <p>SiteStatisticsSchema is a string representing the GraphQL schema for a site statistics query. It includes users, anime, manga, characters, staff, studios, and reviews of type <code>SiteTrendConnection</code>.</p> ATTRIBUTE DESCRIPTION <code>users</code> <p>The users schema of the site statistics.</p> <p> TYPE: <code>str</code> </p> <code>anime</code> <p>The anime schema of the site statistics.</p> <p> TYPE: <code>str</code> </p> <code>manga</code> <p>The manga schema of the site statistics.</p> <p> TYPE: <code>str</code> </p> <code>characters</code> <p>The characters schema of the site statistics.</p> <p> TYPE: <code>str</code> </p> <code>staff</code> <p>The staff schema of the site statistics.</p> <p> TYPE: <code>str</code> </p> <code>studios</code> <p>The studios schema of the site statistics.</p> <p> TYPE: <code>str</code> </p> <code>reviews</code> <p>The reviews schema of the site statistics.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#staff-schema","title":"Staff Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.staff_schema.STAFFSCHEMA","title":"STAFFSCHEMA  <code>module-attribute</code>","text":"<pre><code>STAFFSCHEMA = f'\n  id\n  {NAMESCHEMA}\n  languageV2\n  {IMAGESCHEMA}\n  description(asHtml: $asHtml)\n  primaryOccupations\n  gender\n  dateOfBirth {\n    {FUZZYDATESCHEMA}\n  }\n  dateOfDeath {\n    {FUZZYDATESCHEMA} } age yearsActive homeTown bloodType isFavourite isFavouriteBlocked siteUrl staffMedia (sort:\n    $staffMediaSort, type: $staffMediaType, onList: $staffMediaOnList, page: $staffMediaPage,\n    perPage: $staffMediaPerPage) { nodes { id {TITLESCHEMA}\n    }\n  }\n  characters (sort: $charactersSort, page: $charactersPage, perPage: $charactersPerPage) {\n    nodes {\n      id\n      {NAMESCHEMA} } } characterMedia (sort: $characterMediaSort, onList: $characterMediaOnList,\n      page: $characterMediaPage, perPage: $characterMediaPerPage) { nodes { id {TITLESCHEMA}\n    }\n  }\n  submitter {\n    id\n    name\n  }\n  submissionStatus\n  submissionNotes\n  favourites\n  modNotes\n'\n</code></pre> <p>StaffSchema is a string representing the GraphQL schema for a staff query. It includes the staff's id, name, language, image, description, primary occupations, gender, date of birth, date of death, age, years active, hometown, blood type, favourite status, favourite blocked status, site url, staff media, characters, character media, staff, submitter, submission status, submission notes, favourites, and mod notes.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the staff.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The name schema of the staff.</p> <p> TYPE: <code>str</code> </p> <code>languageV2</code> <p>The language of the staff.</p> <p> TYPE: <code>str</code> </p> <code>image</code> <p>The image schema of the staff.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the staff.</p> <p> TYPE: <code>str</code> </p> <code>primaryOccupations</code> <p>The primary occupations of the staff.</p> <p> TYPE: <code>list</code> </p> <code>gender</code> <p>The gender of the staff.</p> <p> TYPE: <code>str</code> </p> <code>dateOfBirth</code> <p>The fuzzy date schema of the staff's date of birth.</p> <p> TYPE: <code>str</code> </p> <code>dateOfDeath</code> <p>The fuzzy date schema of the staff's date of death.</p> <p> TYPE: <code>str</code> </p> <code>age</code> <p>The age of the staff.</p> <p> TYPE: <code>int</code> </p> <code>yearsActive</code> <p>The years active of the staff.</p> <p> TYPE: <code>int</code> </p> <code>homeTown</code> <p>The hometown of the staff.</p> <p> TYPE: <code>str</code> </p> <code>bloodType</code> <p>The blood type of the staff.</p> <p> TYPE: <code>str</code> </p> <code>isFavourite</code> <p>The favourite status of the staff.</p> <p> TYPE: <code>bool</code> </p> <code>isFavouriteBlocked</code> <p>The favourite blocked status of the staff.</p> <p> TYPE: <code>bool</code> </p> <code>siteUrl</code> <p>The site url of the staff.</p> <p> TYPE: <code>str</code> </p> <code>staffMedia</code> <p>The staff media schema of the staff.</p> <p> TYPE: <code>str</code> </p> <code>characters</code> <p>The characters schema of the staff.</p> <p> TYPE: <code>str</code> </p> <code>characterMedia</code> <p>The character media schema of the staff.</p> <p> TYPE: <code>str</code> </p> <code>submitter</code> <p>The submitter of the staff.</p> <p> TYPE: <code>str</code> </p> <code>submissionStatus</code> <p>The submission status of the staff.</p> <p> TYPE: <code>int</code> </p> <code>submissionNotes</code> <p>The submission notes of the staff.</p> <p> TYPE: <code>str</code> </p> <code>favourites</code> <p>The favourites of the staff.</p> <p> TYPE: <code>int</code> </p> <code>modNotes</code> <p>The mod notes of the staff.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#studio-schema","title":"Studio Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.studio_schema.STUDIOSCHEMA","title":"STUDIOSCHEMA  <code>module-attribute</code>","text":"<pre><code>STUDIOSCHEMA = f'\n  id\n  name\n  isAnimationStudio\n  media (sort: $mediaSort, isMain: $mediaIsMain onList: $mediaOnList, page: $mediaPage, perPage: $mediaPerPage) {\n    edges {\n      id\n      relationType\n      isMainStudio\n      characters {\n        {CHARACTERSCHEMA}\n      }\n      characterRole\n      characterName\n      roleNotes\n      dubGroup\n      voiceActors {\n        {STAFFSCHEMA}\n      }\n      voiceActorRoles {\n        voiceActor {\n          id\n          {NAMESCHEMA}\n          {IMAGESCHEMA}\n        }\n        roleNotes\n        dubGroup\n      }\n      favouriteOrder\n      node {\n        {MEDIASCHEMA}\n      }\n    }\n    nodes {\n      {MEDIASCHEMA}\n    }\n    pageInfo {\n      total\n      perPage\n      currentPage\n      lastPage\n      hasNextPage\n    }\n  }\n  siteUrl\n  isFavourite\n  favourites\n'\n</code></pre> <p>StudioSchema is a string representing the GraphQL schema for a studio query. It includes the studio's id, name, animation studio status, media, site url, favourite status, and favourites count.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the studio.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The name of the studio.</p> <p> TYPE: <code>str</code> </p> <code>isAnimationStudio</code> <p>The animation studio status of the studio.</p> <p> TYPE: <code>bool</code> </p> <code>media</code> <p>The media schema of the studio.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site url of the studio.</p> <p> TYPE: <code>str</code> </p> <code>isFavourite</code> <p>The favourite status of the studio.</p> <p> TYPE: <code>bool</code> </p> <code>favourites</code> <p>The favourites count of the studio.</p> <p> TYPE: <code>int</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#thread-comment-schema","title":"Thread Comment Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.thread_comment_schema.THREADCOMMENTSCHEMA","title":"THREADCOMMENTSCHEMA  <code>module-attribute</code>","text":"<pre><code>THREADCOMMENTSCHEMA = f'\n  id\n  userId\n  threadId\n  comment (asHtml: $asHtml)\n  likeCount\n  isLiked\n  siteUrl\n  createdAt\n  updatedAt\n  thread {\n    {THREADSCHEMA}\n  }\n  user {\n    {BASICUSERSCHEMA}\n  }\n  likes {\n    {BASICUSERSCHEMA}\n  }\n  childComments\n  isLocked\n'\n</code></pre> <p>ThreadCommentSchema is a string representing the GraphQL schema for a thread comment query. It includes the comment's id, userId, threadId, comment, likeCount, isLiked status, siteUrl, createdAt, updatedAt, thread of type <code>ThreadResponse</code>, user of type <code>BasicUser</code>, likes of type <code>BasicUser[]</code>, childComments, and isLocked status.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the thread comment.</p> <p> TYPE: <code>int</code> </p> <code>userId</code> <p>The user id of the thread comment.</p> <p> TYPE: <code>int</code> </p> <code>threadId</code> <p>The thread id of the thread comment.</p> <p> TYPE: <code>int</code> </p> <code>comment</code> <p>The comment of the thread comment.</p> <p> TYPE: <code>str</code> </p> <code>likeCount</code> <p>The like count of the thread comment.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>The liked status of the thread comment.</p> <p> TYPE: <code>bool</code> </p> <code>siteUrl</code> <p>The site url of the thread comment.</p> <p> TYPE: <code>str</code> </p> <code>createdAt</code> <p>The created at timestamp of the thread comment.</p> <p> TYPE: <code>int</code> </p> <code>updatedAt</code> <p>The updated at timestamp of the thread comment.</p> <p> TYPE: <code>int</code> </p> <code>thread</code> <p>The thread schema of the thread comment.</p> <p> TYPE: <code>str</code> </p> <code>user</code> <p>The basic user schema of the thread comment.</p> <p> TYPE: <code>str</code> </p> <code>likes</code> <p>The basic user schema of the likes of the thread comment.</p> <p> TYPE: <code>str</code> </p> <code>childComments</code> <p>The child comments of the thread comment.</p> <p> TYPE: <code>str</code> </p> <code>isLocked</code> <p>The locked status of the thread comment.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#thread-schema","title":"Thread Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.thread_schema.THREADSCHEMA","title":"THREADSCHEMA  <code>module-attribute</code>","text":"<pre><code>THREADSCHEMA = f'\n  id\n  title\n  body (asHtml: $asHtml)\n  userId\n  replyUserId\n  replyCommentId\n  replyCount\n  viewCount\n  isLocked\n  isSticky\n  isSubscribed\n  likeCount\n  isLiked\n  repliedAt\n  createdAt\n  updatedAt\n  user {\n    {BASICUSERSCHEMA}\n  }\n  replyUser {\n    {BASICUSERSCHEMA}\n  }\n  likes {\n    {BASICUSERSCHEMA}\n  }\n  siteUrl\n  categories {\n    id\n    name\n  }\n  mediaCategories {\n    {MEDIASCHEMA}\n  }\n'\n</code></pre> <p>ThreadSchema is a string representing the GraphQL schema for a thread query. It includes the thread's id, title, body, userId, replyUserId, replyCommentId, replyCount, viewCount, isLocked status, isSticky status, isSubscribed status, likeCount, isLiked status, repliedAt, createdAt, updatedAt, user of type <code>BasicUser</code>, replyUser of type <code>BasicUser</code>, likes of type <code>BasicUser[]</code>, siteUrl, categories, and mediaCategories of type <code>MediaResponse[]</code>.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The id of the thread.</p> <p> TYPE: <code>int</code> </p> <code>title</code> <p>The title of the thread.</p> <p> TYPE: <code>str</code> </p> <code>body</code> <p>The body of the thread.</p> <p> TYPE: <code>str</code> </p> <code>userId</code> <p>The user id of the thread.</p> <p> TYPE: <code>int</code> </p> <code>replyUserId</code> <p>The reply user id of the thread.</p> <p> TYPE: <code>int</code> </p> <code>replyCommentId</code> <p>The reply comment id of the thread.</p> <p> TYPE: <code>int</code> </p> <code>replyCount</code> <p>The reply count of the thread.</p> <p> TYPE: <code>int</code> </p> <code>viewCount</code> <p>The view count of the thread.</p> <p> TYPE: <code>int</code> </p> <code>isLocked</code> <p>The locked status of the thread.</p> <p> TYPE: <code>bool</code> </p> <code>isSticky</code> <p>The sticky status of the thread.</p> <p> TYPE: <code>bool</code> </p> <code>isSubscribed</code> <p>The subscribed status of the thread.</p> <p> TYPE: <code>bool</code> </p> <code>likeCount</code> <p>The like count of the thread.</p> <p> TYPE: <code>int</code> </p> <code>isLiked</code> <p>The liked status of the thread.</p> <p> TYPE: <code>bool</code> </p> <code>repliedAt</code> <p>The replied at timestamp of the thread.</p> <p> TYPE: <code>int</code> </p> <code>createdAt</code> <p>The created at timestamp of the thread.</p> <p> TYPE: <code>int</code> </p> <code>updatedAt</code> <p>The updated at timestamp of the thread.</p> <p> TYPE: <code>int</code> </p> <code>user</code> <p>The basic user schema of the thread.</p> <p> TYPE: <code>str</code> </p> <code>replyUser</code> <p>The basic user schema of the reply user of the thread.</p> <p> TYPE: <code>str</code> </p> <code>likes</code> <p>The basic user schema of the likes of the thread.</p> <p> TYPE: <code>str</code> </p> <code>siteUrl</code> <p>The site url of the thread.</p> <p> TYPE: <code>str</code> </p> <code>categories</code> <p>The categories of the thread.</p> <p> TYPE: <code>str</code> </p> <code>mediaCategories</code> <p>The media schema of the media categories of the thread.</p> <p> TYPE: <code>str</code> </p>"},{"location":"AniLink/AniList/Queries/schemas/#user-schema","title":"User Schema","text":""},{"location":"AniLink/AniList/Queries/schemas/#AniLinkPy.apis.anilist.schemas.query.user_schema.USERSCHEMA","title":"USERSCHEMA  <code>module-attribute</code>","text":"<pre><code>USERSCHEMA = f'\n  id\n  name\n  about(asHtml: $asHtml)\n  avatar {\n    large\n    medium\n  }\n  bannerImage\n  isFollowing\n  isFollower\n  isBlocked\n  bans\n  options {\n    titleLanguage\n    displayAdultContent\n    airingNotifications\n    profileColor\n    notificationOptions {\n      type\n      enabled\n    }\n    timezone\n    activityMergeTime\n    staffNameLanguage\n    restrictMessagesToFollowing\n    disabledListActivity {\n    disabled\n    type\n    }\n  }\n  mediaListOptions {\n    scoreFormat\n    rowOrder\n    animeList {\n      sectionOrder\n      splitCompletedSectionByFormat\n      customLists\n      advancedScoring\n      advancedScoringEnabled\n    }\n    mangaList {\n      sectionOrder\n      splitCompletedSectionByFormat\n      customLists\n      advancedScoring\n      advancedScoringEnabled\n    }\n  }\n  favourites {\n    anime (perPage: 50) {\n      edges {\n        node {\n          id\n          {TITLESCHEMA}\n        }\n      }\n      nodes {\n        id\n        {TITLESCHEMA}\n      }\n    }\n    manga (perPage: 50) {\n      edges {\n        node {\n        id\n        {TITLESCHEMA}\n        }\n      }\n      nodes {\n        id\n        {TITLESCHEMA}\n      }\n    }\n    characters (perPage: 50) {\n      edges {\n        id\n        role\n        name\n        voiceActors {\n          id\n          {NAMESCHEMA}\n          {IMAGESCHEMA}\n        }\n        media {\n          id\n          {TITLESCHEMA}\n          {COVERIMAGESCHEMA}\n        }\n        favouriteOrder\n        node {\n          id\n          {NAMESCHEMA}\n          {IMAGESCHEMA}\n        }\n      }\n    }\n    staff (perPage: 50) {\n      edges {\n        id\n        role\n        favouriteOrder\n        node {\n          id\n          {NAMESCHEMA}\n          {IMAGESCHEMA}\n        }\n      }\n    }\n    studios (perPage: 50) {\n      edges {\n        id\n        isMain\n        favouriteOrder\n        node {\n          id\n          name\n          isAnimationStudio\n          siteUrl\n        }\n      }\n    }\n  }\n  statistics {\n    anime {\n      count\n      meanScore\n      standardDeviation\n      minutesWatched\n      episodesWatched\n      formats (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        format\n      }\n      statuses (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        status\n      }\n      scores (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        score\n      }\n      lengths (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        length\n      }\n      releaseYears (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        releaseYear\n      }\n      startYears (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        startYear\n      }\n      genres (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        genre\n      }\n      tags (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        tag {\n          {TAGSCHEMA}\n        }\n      }\n      countries (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        country\n      }\n      voiceActors (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        voiceActor {\n          id\n          {NAMESCHEMA}\n        }\n        characterIds\n      }\n      staff (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        staff {\n          id\n          {NAMESCHEMA}\n        }\n      }\n      studios (limit: $animeStatLimit, sort: $animeStatSort) {\n        {USERANIMESTATSSCHEMA}\n        studio {\n          id\n          name\n        }\n      }\n    }\n    manga {\n      count\n      meanScore\n      standardDeviation\n      chaptersRead\n      volumesRead\n      formats (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        format\n      }\n      statuses (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        status\n      }\n      scores (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        score\n      }\n      lengths (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        length\n      }\n      releaseYears (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        releaseYear\n      }\n      startYears (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        startYear\n      }\n      genres (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        genre\n      }\n      tags (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        tag {\n          {TAGSCHEMA}\n        }\n      }\n      countries (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        country\n      }\n      staff (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        staff {\n          id\n          {NAMESCHEMA}\n        }\n      }\n      studios (limit: $mangaStatLimit, sort: $mangaStatSort) {\n        {USERMANGASTATSSCHEMA}\n        studio {\n          id\n          name\n        }\n      }\n    }\n  }\n  stats {\n    watchedTime\n    chaptersRead\n    activityHistory {\n      date\n      amount\n      level\n    }\n    animeStatusDistribution {\n      status\n      amount\n    }\n    mangaStatusDistribution {\n      status\n      amount\n    }\n    animeScoreDistribution {\n      score\n      amount\n    }\n    mangaScoreDistribution {\n      score\n      amount\n    }\n    animeListScores {\n      meanScore\n      standardDeviation\n    }\n    mangaListScores {\n      meanScore\n      standardDeviation\n    }\n    favouredGenresOverview {\n      genre\n      amount\n      meanScore\n      timeWatched\n    }\n    favouredGenres {\n      genre\n      amount\n      meanScore\n      timeWatched\n    }\n    favouredTags {\n      tag {\n        {TAGSCHEMA}\n      }\n      amount\n      meanScore\n      timeWatched\n    }\n    favouredActors {\n      staff {\n        id\n        {NAMESCHEMA}\n      }\n      amount\n      meanScore\n      timeWatched\n    }\n    favouredStaff {\n      staff {\n        id\n        {NAMESCHEMA}\n      }\n      amount\n      meanScore\n      timeWatched\n    }\n    favouredStudios {\n      studio {\n        id\n        name\n      }\n      amount\n      meanScore\n      timeWatched\n    }\n    favouredYears {\n      year\n      amount\n      meanScore\n    }\n    favouredFormats {\n      format\n      amount\n    }\n  }\n  unreadNotificationCount\n  siteUrl\n  donatorTier\n  donatorBadge\n  moderatorRoles\n  createdAt\n  updatedAt\n  previousNames {\n    name\n    createdAt\n    updatedAt\n  }\n'\n</code></pre> <p>This is the UserSchema for the Anilist API. It defines the structure of the user data that is expected to be returned from the API.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The user's ID.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The user's name.</p> <p> TYPE: <code>str</code> </p> <code>about</code> <p>The user's about information.</p> <p> TYPE: <code>str</code> </p> <code>avatar</code> <p>The user's avatar, with 'large' and 'medium' sizes.</p> <p> TYPE: <code>dict</code> </p> <code>bannerImage</code> <p>The URL of the user's banner image.</p> <p> TYPE: <code>str</code> </p> <code>isFollowing</code> <p>Whether the user is following.</p> <p> TYPE: <code>bool</code> </p> <code>isFollower</code> <p>Whether the user is a follower.</p> <p> TYPE: <code>bool</code> </p> <code>isBlocked</code> <p>Whether the user is blocked.</p> <p> TYPE: <code>bool</code> </p> <code>bans</code> <p>The user's bans.</p> <p> TYPE: <code>list</code> </p> <code>options</code> <p>The user's options.</p> <p> TYPE: <code>dict</code> </p> <code>mediaListOptions</code> <p>The user's media list options.</p> <p> TYPE: <code>dict</code> </p> <code>favourites</code> <p>The user's favourites.</p> <p> TYPE: <code>dict</code> </p> <code>statistics</code> <p>The user's statistics.</p> <p> TYPE: <code>dict</code> </p> <code>stats</code> <p>The user's stats.</p> <p> TYPE: <code>dict</code> </p> <code>unreadNotificationCount</code> <p>The user's unread notification count.</p> <p> TYPE: <code>int</code> </p> <code>siteUrl</code> <p>The user's site URL.</p> <p> TYPE: <code>str</code> </p> <code>donatorTier</code> <p>The user's donator tier.</p> <p> TYPE: <code>int</code> </p> <code>donatorBadge</code> <p>The user's donator badge.</p> <p> TYPE: <code>str</code> </p> <code>moderatorRoles</code> <p>The user's moderator roles.</p> <p> TYPE: <code>list</code> </p> <code>createdAt</code> <p>The timestamp of when the user was created.</p> <p> TYPE: <code>int</code> </p> <code>updatedAt</code> <p>The timestamp of when the user was last updated.</p> <p> TYPE: <code>int</code> </p> <code>previousNames</code> <p>The user's previous names.</p> <p> TYPE: <code>list</code> </p>"},{"location":"AniLink/AniList/Queries/user/","title":"User Query Documentation","text":""},{"location":"AniLink/AniList/Queries/user/#AniLinkPy.apis.anilist.query.user.UserQuery","title":"UserQuery","text":"<pre><code>UserQuery(auth_token: Union[str, None])\n</code></pre> <p>This class represents a user Query in the AniLink API.</p> ATTRIBUTE DESCRIPTION <code>base_url</code> <p>The base URL for the AniLink API.</p> <p> TYPE: <code>str</code> </p> <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> PARAMETER DESCRIPTION <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/user.py</code> <pre><code>def __init__(self, auth_token: Union[str, None]) -&gt; None:\n    \"\"\"\n    The constructor for the UserQuery class.\n\n    Args:\n        auth_token (str): The authentication token.\n    \"\"\"\n    self.base_url = \"https://graphql.anilist.co\"\n    self.auth_token = auth_token\n</code></pre>"},{"location":"AniLink/AniList/Queries/user/#AniLinkPy.apis.anilist.query.user.UserQuery.auth_token","title":"auth_token  <code>instance-attribute</code>","text":"<pre><code>auth_token = auth_token\n</code></pre>"},{"location":"AniLink/AniList/Queries/user/#AniLinkPy.apis.anilist.query.user.UserQuery.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = 'https://graphql.anilist.co'\n</code></pre>"},{"location":"AniLink/AniList/Queries/user/#AniLinkPy.apis.anilist.query.user.UserQuery.user","title":"user","text":"<pre><code>user(variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict\n</code></pre> <p>This method is used to send a user Query.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If no variables are provided.</p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the user Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/user.py</code> <pre><code>def user(self, variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict:\n    \"\"\"\n    This method is used to send a user Query.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Raises:\n        ValueError: If no variables are provided.\n\n    Returns:\n        dict: The response from the user Query.\n    \"\"\"\n    if not variables:\n        raise ValueError(\"At least one variable must be provided\")\n\n    query = f\"\"\"\n        query ($id: Int, $name: String, $isModerator: Boolean, $search: String, $sort: [UserSort],\n            $asHtml: Boolean, $animeStatLimit: Int, $mangaStatLimit: Int, $animeStatSort: [UserStatisticsSort],\n            $mangaStatSort: [UserStatisticsSort]) {{ User (id: $id, name: $name, isModerator: $isModerator,\n            search: $search, sort: $sort) {{ {USERSCHEMA}\n            }}\n        }}\n    \"\"\"\n\n    data = {\"query\": query, \"variables\": variables}\n    return send_request(self.base_url, \"POST\", data, self.auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/","title":"Anilist Query Page Documentation","text":"<p>This module contains the Page class which represents a Page in the AniLink API.</p>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page","title":"Page","text":"<pre><code>Page(auth_token: Union[str, None])\n</code></pre> <p>This class represents a Page in the AniLink API.</p> PARAMETER DESCRIPTION <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/page/page.py</code> <pre><code>def __init__(self, auth_token: Union[str, None]) -&gt; None:\n    \"\"\"\n    The constructor for Page class.\n\n    Args:\n        auth_token (str): The authentication token.\n    \"\"\"\n    self.activities_query = ActivitiesQuery(auth_token)\n    self.activity_replies_query = ActivityRepliesQuery(auth_token)\n    self.airing_schedules_query = AiringSchedulesQuery(auth_token)\n    self.characters_query = CharactersQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.activities_query","title":"activities_query  <code>instance-attribute</code>","text":"<pre><code>activities_query = ActivitiesQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.activity_replies_query","title":"activity_replies_query  <code>instance-attribute</code>","text":"<pre><code>activity_replies_query = ActivityRepliesQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.airing_schedules_query","title":"airing_schedules_query  <code>instance-attribute</code>","text":"<pre><code>airing_schedules_query = AiringSchedulesQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.characters_query","title":"characters_query  <code>instance-attribute</code>","text":"<pre><code>characters_query = CharactersQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.activities","title":"activities","text":"<pre><code>activities(variables: Union[Dict[str, Union[str, int, bool]], None] = None) -&gt; dict\n</code></pre> <p>This method is used to get activities.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the activities Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/page/page.py</code> <pre><code>def activities(\n    self, variables: Union[Dict[str, Union[str, int, bool]], None] = None\n) -&gt; dict:\n    \"\"\"\n    This method is used to get activities.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the activities Query.\n    \"\"\"\n    if variables is None:\n        variables = {}\n    return self.activities_query.activities(variables)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.activityReplies","title":"activityReplies","text":"<pre><code>activityReplies(variables: Union[Dict[str, Union[str, int, bool]], None] = None) -&gt; dict\n</code></pre> <p>This method is used to get activity_replies.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the activity_replies Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/page/page.py</code> <pre><code>def activityReplies(\n    self, variables: Union[Dict[str, Union[str, int, bool]], None] = None\n) -&gt; dict:\n    \"\"\"\n    This method is used to get activity_replies.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the activity_replies Query.\n    \"\"\"\n    if variables is None:\n        variables = {}\n    return self.activity_replies_query.activityReplies(variables)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.airingSchedules","title":"airingSchedules","text":"<pre><code>airingSchedules(variables: Union[Dict[str, Union[str, int, bool]], None] = None) -&gt; dict\n</code></pre> <p>This method is used to get airing_schedules.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the airing_schedules Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/page/page.py</code> <pre><code>def airingSchedules(\n    self, variables: Union[Dict[str, Union[str, int, bool]], None] = None\n) -&gt; dict:\n    \"\"\"\n    This method is used to get airing_schedules.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the airing_schedules Query.\n    \"\"\"\n    if variables is None:\n        variables = {}\n    return self.airing_schedules_query.airingSchedules(variables)\n</code></pre>"},{"location":"AniLink/AniList/Queries/Page/#AniLinkPy.apis.anilist.query.page.page.Page.characters","title":"characters","text":"<pre><code>characters(variables: Union[Dict[str, Union[str, int, bool]], None] = None) -&gt; dict\n</code></pre> <p>This method is used to get characters.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the characters Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/page/page.py</code> <pre><code>def characters(\n    self, variables: Union[Dict[str, Union[str, int, bool]], None] = None\n) -&gt; dict:\n    \"\"\"\n    This method is used to get characters.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the characters Query.\n    \"\"\"\n    if variables is None:\n        variables = {}\n    return self.characters_query.characters(variables)\n</code></pre>"},{"location":"AniLink/AniList/Query/","title":"Anilist Query Documentation","text":""},{"location":"AniLink/AniList/Query/#AniLinkPy.apis.anilist.query.query.Query","title":"Query","text":"<pre><code>Query(auth_token: Union[str, None])\n</code></pre> <p>This class represents a Query in the AniLink API.</p> ATTRIBUTE DESCRIPTION <code>page</code> <p>An instance of the Page class.</p> <p> TYPE: <code>Page</code> </p> <code>user_query</code> <p>An instance of the UserQuery class.</p> <p> TYPE: <code>UserQuery</code> </p> PARAMETER DESCRIPTION <code>auth_token</code> <p>The authentication token.</p> <p> TYPE: <code>str</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/query.py</code> <pre><code>def __init__(self, auth_token: Union[str, None]) -&gt; None:\n    \"\"\"\n    The constructor for Query class.\n\n    Args:\n        auth_token (str): The authentication token.\n    \"\"\"\n    self.page = Page(auth_token)\n    self.user_query = UserQuery(auth_token)\n    self.media_query = MediaQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Query/#AniLinkPy.apis.anilist.query.query.Query.media_query","title":"media_query  <code>instance-attribute</code>","text":"<pre><code>media_query = MediaQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Query/#AniLinkPy.apis.anilist.query.query.Query.page","title":"page  <code>instance-attribute</code>","text":"<pre><code>page = Page(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Query/#AniLinkPy.apis.anilist.query.query.Query.user_query","title":"user_query  <code>instance-attribute</code>","text":"<pre><code>user_query = UserQuery(auth_token)\n</code></pre>"},{"location":"AniLink/AniList/Query/#AniLinkPy.apis.anilist.query.query.Query.media","title":"media","text":"<pre><code>media(variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict\n</code></pre> <p>This method is used to get a media.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the media Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/query.py</code> <pre><code>def media(self, variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict:\n    \"\"\"\n    This method is used to get a media.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the media Query.\n    \"\"\"\n    return self.media_query.media(variables)\n</code></pre>"},{"location":"AniLink/AniList/Query/#AniLinkPy.apis.anilist.query.query.Query.user","title":"user","text":"<pre><code>user(variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict\n</code></pre> <p>This method is used to get a user.</p> PARAMETER DESCRIPTION <code>variables</code> <p>The variables for the Query.</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The response from the user Query.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>AniLinkPy/apis/anilist/query/query.py</code> <pre><code>def user(self, variables: Union[Dict[str, Union[str, int, bool]]]) -&gt; dict:\n    \"\"\"\n    This method is used to get a user.\n\n    Args:\n        variables (dict): The variables for the Query.\n\n    Returns:\n        dict: The response from the user Query.\n    \"\"\"\n    return self.user_query.user(variables)\n</code></pre>"}]}